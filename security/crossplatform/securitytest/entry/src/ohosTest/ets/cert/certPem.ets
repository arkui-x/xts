/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { cert } from "@kit.DeviceCertificateKit";
import { compareString, compareUint8Array, stringTouInt8Array } from "../common/commonFunc";
import HashMap from '@ohos.util.HashMap';

let certPemZh: string =
  '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIID5jCCAs6gAwIBAgIGAXKnJjrBMA0GCSqGSIb3DQEBCwUAMHcxCzAJBgNVBAYT\n' +
    'AkNOMRowGAYDVQQIDBHpmZXopb8gSEFJIDEzPC4uPjEZMBcGA1UEBwwQSGVsbG8g\n' +
    'MzIxIOilv+WuiTEVMBMGA1UECgwMSGVsbG8g5rWL6K+VMRowGAYDVQQDDBHkuK3m\n' +
    'lofmtYvor5UgVGVzdDAeFw0yNTA0MTQwNjIyNDFaFw0zNTA0MTIwNjIyNDFaMHcx\n' +
    'CzAJBgNVBAYTAkNOMRowGAYDVQQIDBHpmZXopb8gSEFJIDEzPC4uPjEZMBcGA1UE\n' +
    'BwwQSGVsbG8gMzIxIOilv+WuiTEVMBMGA1UECgwMSGVsbG8g5rWL6K+VMRowGAYD\n' +
    'VQQDDBHkuK3mlofmtYvor5UgVGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC\n' +
    'AQoCggEBAK97U95SJdexGNZi5hn1FRAz7vEBcjeshgR/JXY2IkWAsC8DoCT/6BHg\n' +
    'kIPE+IPqbqnYqRbRywkgDnYB8ymKA4znoVa2e7ZARa4RZKz8zBlEe710pNL5Je82\n' +
    'L+FIJQtLMwb5KiWpMC8V6KcJZRHIKNy4xcwbEv5Q/6joJGqKVLsAEfK2uFrVEz+g\n' +
    'F8F8+rKnHMiIYXP/oLcaK63DAjyUXEYERDHnYhRcvLEzQHI8fMylkrta/KHu7gKt\n' +
    'Knp0MCK0h6nfPZi8hsbTKUKVcLzTdFxeVQbqnoF4LHK3+F8y+st3K6j4iIol0g7j\n' +
    'TyCkAzZeUzBZX4pfp7l8gfygRLTbdiUCAwEAAaN4MHYwEgYDVR0TAQH/BAgwBgEB\n' +
    '/wIBATAOBgNVHQ8BAf8EBAMCBaAwJwYDVR0lBCAwHgYIKwYBBQUHAwEGCCsGAQUF\n' +
    'BwMCBggrBgEFBQcDCTAnBgNVHREEIDAeggtleGFtcGxlLmNvbYIPd3d3LmV4YW1w\n' +
    'bGUuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQAvaHk/T6Q9vTYeTmkpz6w0utvJSW3L\n' +
    '2U0/RHZy8vGniJNu/MMN3GZChizRbjiCPdfBeat8ZhZ6jiD0t9jm7W6xz9BklHhL\n' +
    'relu3hjV7Oni+3/ytbAu+eGy6gOQYePY5aslZGnKFW7Rrra78trAMWEdAsjUQWWo\n' +
    'd+sN9XvkpGPjNtlfH4i7x/gGUreIevbfViek26jYArhHUcxCaZAhMzZSU/3AqTal\n' +
    'S7oHZKS0fZUjlCs+6vxxCmQcqIktii4jVy1od6S/dax8cAGD9GEfNOQUcPI2VU2a\n' +
    'WwM8H889EWts9oK02rFJUYMCs1qCphPUWgnbouoHGXfjLAmIi3IsTEov\n'         +
    '-----END CERTIFICATE-----'

let certPemEn: string =
  '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIIDojCCAoqgAwIBAgIGAXKnJjrAMA0GCSqGSIb3DQEBCwUAMFUxCzAJBgNVBAYT\n' +
    'AkNOMRAwDgYDVQQIDAdzaGFuIHhpMQ4wDAYDVQQHDAV4aSBhbjESMBAGA1UECgwJ\n' +
    'byAxMSB0ZXN0MRAwDgYDVQQDDAd0ZXN0MzIxMB4XDTI1MDQxNDA2MjA1NVoXDTM1\n' +
    'MDQxMjA2MjA1NVowVTELMAkGA1UEBhMCQ04xEDAOBgNVBAgMB3NoYW4geGkxDjAM\n' +
    'BgNVBAcMBXhpIGFuMRIwEAYDVQQKDAlvIDExIHRlc3QxEDAOBgNVBAMMB3Rlc3Qz\n' +
    'MjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCve1PeUiXXsRjWYuYZ\n' +
    '9RUQM+7xAXI3rIYEfyV2NiJFgLAvA6Ak/+gR4JCDxPiD6m6p2KkW0csJIA52AfMp\n' +
    'igOM56FWtnu2QEWuEWSs/MwZRHu9dKTS+SXvNi/hSCULSzMG+SolqTAvFeinCWUR\n' +
    'yCjcuMXMGxL+UP+o6CRqilS7ABHytrha1RM/oBfBfPqypxzIiGFz/6C3GiutwwI8\n' +
    'lFxGBEQx52IUXLyxM0ByPHzMpZK7Wvyh7u4CrSp6dDAitIep3z2YvIbG0ylClXC8\n' +
    '03RcXlUG6p6BeCxyt/hfMvrLdyuo+IiKJdIO408gpAM2XlMwWV+KX6e5fIH8oES0\n' +
    '23YlAgMBAAGjeDB2MBIGA1UdEwEB/wQIMAYBAf8CAQEwDgYDVR0PAQH/BAQDAgWg\n' +
    'MCcGA1UdJQQgMB4GCCsGAQUFBwMBBggrBgEFBQcDAgYIKwYBBQUHAwkwJwYDVR0R\n' +
    'BCAwHoILZXhhbXBsZS5jb22CD3d3dy5leGFtcGxlLmNvbTANBgkqhkiG9w0BAQsF\n' +
    'AAOCAQEAEk+j/mH188+/YE+C7FIWad5biacSXJ/o7ioLBQ/RcqUjVrXjcCNX7bM9\n' +
    'blghm0iPvO1Bo866WuemKvQ2s9tYdQ3Qfu6t43yjft5+ORQETofdeAFcu9dmNjvB\n' +
    'u090kRJA33owbaSq3KDLkG7K+pAtF4mDNdEuaYCQrpIkF2f/XbFIcFXUix0+5fU5\n' +
    's+M36w9gW7/WTIK0DimrVpX2TjMtsoBSxtOVoX4c2dlMeHsSchUiyajJR7W3AtGV\n' +
    'HD2jFQGbYzhmCFURGNiwJbEaCyIJ57xjaq/JSsoORiB2wbHUG8sPwVtGyqlFvADk\n' +
    'tkoPiQ3TXq73p1gJicz6f0N4kCVu+Q==\n'                                 +
    '-----END CERTIFICATE-----'

let certPemMultipleCNZh: string =
  '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIIEXDCCA0SgAwIBAgIGAXKnJjrCMA0GCSqGSIb3DQEBCwUAMIGxMQswCQYDVQQG\n' +
    'EwJDTjEaMBgGA1UECAwR6ZmV6KW/IEhBSSAxMzwuLj4xGTAXBgNVBAcMEEhlbGxv\n' +
    'IDMyMSDopb/lrokxFTATBgNVBAoMDEhlbGxvIOa1i+ivlTEaMBgGA1UEAwwR5Lit\n' +
    '5paH5rWL6K+VIFRlc3QxGzAZBgNVBAMMEuS4reaWh+a1i+ivlSBUZXN0MTEbMBkG\n' +
    'A1UEAwwS5Lit5paH5rWL6K+VIFRlc3QyMB4XDTI1MDQxNDA5MTU1MVoXDTM1MDQx\n' +
    'MjA5MTU1MVowgbExCzAJBgNVBAYTAkNOMRowGAYDVQQIDBHpmZXopb8gSEFJIDEz\n' +
    'PC4uPjEZMBcGA1UEBwwQSGVsbG8gMzIxIOilv+WuiTEVMBMGA1UECgwMSGVsbG8g\n' +
    '5rWL6K+VMRowGAYDVQQDDBHkuK3mlofmtYvor5UgVGVzdDEbMBkGA1UEAwwS5Lit\n' +
    '5paH5rWL6K+VIFRlc3QxMRswGQYDVQQDDBLkuK3mlofmtYvor5UgVGVzdDIwggEi\n' +
    'MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCve1PeUiXXsRjWYuYZ9RUQM+7x\n' +
    'AXI3rIYEfyV2NiJFgLAvA6Ak/+gR4JCDxPiD6m6p2KkW0csJIA52AfMpigOM56FW\n' +
    'tnu2QEWuEWSs/MwZRHu9dKTS+SXvNi/hSCULSzMG+SolqTAvFeinCWURyCjcuMXM\n' +
    'GxL+UP+o6CRqilS7ABHytrha1RM/oBfBfPqypxzIiGFz/6C3GiutwwI8lFxGBEQx\n' +
    '52IUXLyxM0ByPHzMpZK7Wvyh7u4CrSp6dDAitIep3z2YvIbG0ylClXC803RcXlUG\n' +
    '6p6BeCxyt/hfMvrLdyuo+IiKJdIO408gpAM2XlMwWV+KX6e5fIH8oES023YlAgMB\n' +
    'AAGjeDB2MBIGA1UdEwEB/wQIMAYBAf8CAQEwDgYDVR0PAQH/BAQDAgWgMCcGA1Ud\n' +
    'JQQgMB4GCCsGAQUFBwMBBggrBgEFBQcDAgYIKwYBBQUHAwkwJwYDVR0RBCAwHoIL\n' +
    'ZXhhbXBsZS5jb22CD3d3dy5leGFtcGxlLmNvbTANBgkqhkiG9w0BAQsFAAOCAQEA\n' +
    'DI9GrsiLGnzppFmQDix2nS2EylrBKtjHErtDMKWWcj1humnJCpBpgOaCByripocs\n' +
    'BhBsaqXz/NU+Qv7ldMsZpcztrS5BZT4/h4WiZagIIIXDXPSH74K/DswDvwbTnSc8\n' +
    '6pD3J6tHW+LkU5O1G8tNSFwA85wohEjtbCHZVwf6hpt5pi1md44SEoR2CY74XUfn\n' +
    '1DWPR+5ODofNQpMhz8rcS1LGW/j5ZqcuBlJKFXAm+ZbZpawzA5IWBiayqPdZD0U7\n' +
    'OYHX/dzfpjqMAvHDuK/dBoCKg/mzp3kiY+JcwJMModMRaP82MMj0Jo3zhIPtTX05\n' +
    'YGsUS9jQ57YadGQKoYHIcA==\n'                                         +
    '-----END CERTIFICATE-----'

let DNZh: string =
  "/CN=中文TEST/OU=中文TEST/O=中文TEST/L=中文TEST/ST=中文TEST/C=CN/CN=中文TEST/CN=中文TEST"

let DNEn: string =
  "/CN=TEST/OU=TEST/O=TEST/L=TEST/ST=TEST/C=US/CN=TEST/CN=TEST"

let chainPemZh: string =
  '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIIBlDCCATqgAwIBAgIUUx7GjuLeFC9f1yynoTZrpmYcKKYwCgYIKoZIzj0EAwIw\n' +
    'PjELMAkGA1UEBhMCQ04xGTAXBgNVBAoMEFJvb3QgQ0EgQ29ycCDmoLkxFDASBgNV\n' +
    'BAMMC1Jvb3QgQ0Eg5qC5MB4XDTI1MDQxNDExMTgzM1oXDTM1MDQxMjExMTgzM1ow\n' +
    'PjELMAkGA1UEBhMCQ04xGTAXBgNVBAoMEFJvb3QgQ0EgQ29ycCDmoLkxFDASBgNV\n' +
    'BAMMC1Jvb3QgQ0Eg5qC5MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE81102cdB\n' +
    'L08fkx5wxCG/mSQJdMu1xxpMGj2XUgenzbgYyHZ7ofe2YUTpWMjCIifhc4IVEZIN\n' +
    'UCleLn8xGa0x56MWMBQwEgYDVR0TAQH/BAgwBgEB/wIBAjAKBggqhkjOPQQDAgNI\n' +
    'ADBFAiEAolWYyEaFijGBI/SuEc6o4n7WUdkFjLRKTUJeSgdZhrcCIEU2J0TAqYyv\n' +
    'MGUzacduh8zp0BOC+65o9xcEhE3SQI10\n'                                 +
    '-----END CERTIFICATE-----\n'                                        +
    '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIIBpDCCAUqgAwIBAgIUe8ZyZme9A2eMurr+FFMx1VMcsSAwCgYIKoZIzj0EAwIw\n' +
    'PjELMAkGA1UEBhMCQ04xGTAXBgNVBAoMEFJvb3QgQ0EgQ29ycCDmoLkxFDASBgNV\n' +
    'BAMMC1Jvb3QgQ0Eg5qC5MB4XDTI1MDQxNDExMTgzM1oXDTMwMDQxMzExMTgzM1ow\n' +
    'TjELMAkGA1UEBhMCQ04xITAfBgNVBAoMGEludGVybWVkaWF0ZSBDQSBDb3JwIOag\n' +
    'uTEcMBoGA1UEAwwTSW50ZXJtZWRpYXRlIENBIOaguTBZMBMGByqGSM49AgEGCCqG\n' +
    'SM49AwEHA0IABNQx7KpHpTNn3IH8RWJFovnhDOhunvCd3qwA+JnOlMb+uFlWR9+G\n' +
    'K2fVwBDK6SfWRshjXDRHNlgwyFwW/6MRER6jFjAUMBIGA1UdEwEB/wQIMAYBAf8C\n' +
    'AQEwCgYIKoZIzj0EAwIDSAAwRQIhAOVFcYNW+4YM7O3QkLRyJlewfdO7Qf2JhZUd\n' +
    '1VFnIBtiAiAE0WLkHU505yMAcBy82JrcPlJrz+RI/AaQVJggChDaNg==\n'         +
    '-----END CERTIFICATE-----\n'                                        +
    '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIIB1TCCAXqgAwIBAgIUWtiIpmIHUuHgg/VbT4ZaL1XyhBEwCgYIKoZIzj0EAwIw\n' +
    'TjELMAkGA1UEBhMCQ04xITAfBgNVBAoMGEludGVybWVkaWF0ZSBDQSBDb3JwIOag\n' +
    'uTEcMBoGA1UEAwwTSW50ZXJtZWRpYXRlIENBIOaguTAeFw0yNTA0MTQxMTE4MzNa\n' +
    'Fw0yNjA0MTQxMTE4MzNaMHQxCzAJBgNVBAYTAkNOMRcwFQYDVQQIDA5CZWlqaW5n\n' +
    'IOWMl+S6rDEXMBUGA1UEBwwOQmVpamluZyDljJfkuqwxGTAXBgNVBAoMEEV4YW1w\n' +
    'bGUgQ29ycCDll6gxGDAWBgNVBAMMD2V4YW1wbGUuY29tIOS+izBZMBMGByqGSM49\n' +
    'AgEGCCqGSM49AwEHA0IABG8nx9wUfJRf6B6U2oCuF+8XLLON7xIBPSAYNJnL9BD8\n' +
    'BsWchcDiMiBVBZeLWq3Xm25hKuCvwM/NCNttixtC3FSjEDAOMAwGA1UdEwEB/wQC\n' +
    'MAAwCgYIKoZIzj0EAwIDSQAwRgIhALf2V8Fu8Da8fNi8q+Xs2nNagtohc7X6Uhkm\n' +
    'IGIoFO3xAiEA8kKITUqwI5TDSm18vb44sg2nm55WgYPZ6oIuchLq9mA=\n'         +
    '-----END CERTIFICATE-----'

let certErrorCNPem: string =
  '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIIDozCCAougAwIBAgIGAXKnJjrAMA0GCSqGSIb3DQEBCwUAMFYxDDAKBgNVBAYT\n' +
    'A0MxTjEQMA4GA1UECAwHc2hhbiB4aTEOMAwGA1UEBwwFeGkgYW4xEjAQBgNVBAoM\n' +
    'CW8gMTEgdGVzdDEQMA4GA1UEAwwHdGVzdDMyMTAeFw0yNTA0MTQwNjIwNTVaFw0z\n' +
    'NTA0MTIwNjIwNTVaMFUxCzAJBgNVBAYTAkNOMRAwDgYDVQQIDAdzaGFuIHhpMQ4w\n' +
    'DAYDVQQHDAV4aSBhbjESMBAGA1UECgwJbyAxMSB0ZXN0MRAwDgYDVQQDDAd0ZXN0\n' +
    'MzIxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr3tT3lIl17EY1mLm\n' +
    'GfUVEDPu8QFyN6yGBH8ldjYiRYCwLwOgJP/oEeCQg8T4g+puqdipFtHLCSAOdgHz\n' +
    'KYoDjOehVrZ7tkBFrhFkrPzMGUR7vXSk0vkl7zYv4UglC0szBvkqJakwLxXopwll\n' +
    'Ecgo3LjFzBsS/lD/qOgkaopUuwAR8ra4WtUTP6AXwXz6sqccyIhhc/+gtxorrcMC\n' +
    'PJRcRgREMediFFy8sTNAcjx8zKWSu1r8oe7uAq0qenQwIrSHqd89mLyGxtMpQpVw\n' +
    'vNN0XF5VBuqegXgscrf4XzL6y3crqPiIiiXSDuNPIKQDNl5TMFlfil+nuXyB/KBE\n' +
    'tNt2JQIDAQABo3gwdjASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIF\n' +
    'oDAnBgNVHSUEIDAeBggrBgEFBQcDAQYIKwYBBQUHAwIGCCsGAQUFBwMJMCcGA1Ud\n' +
    'EQQgMB6CC2V4YW1wbGUuY29tgg93d3cuZXhhbXBsZS5jb20wDQYJKoZIhvcNAQEL\n' +
    'BQADggEBABJPo/5h9fPPv2BPguxSFmneW4mnElyf6O4qCwUP0XKlI1a143AjV+2z\n' +
    'PW5YIZtIj7ztQaPOulrnpir0NrPbWHUN0H7ureN8o37efjkUBE6H3XgBXLvXZjY7\n' +
    'wbtPdJESQN96MG2kqtygy5BuyvqQLReJgzXRLmmAkK6SJBdn/12xSHBV1IsdPuX1\n' +
    'ObPjN+sPYFu/1kyCtA4pq1aV9k4zLbKAUsbTlaF+HNnZTHh7EnIVIsmoyUe1twLR\n' +
    'lRw9oxUBm2M4ZghVERjYsCWxGgsiCee8Y2qvyUrKDkYgdsGx1BvLD8FbRsqpRbwA\n' +
    '5LZKD4kN016u96dYCYnM+n9DeJAlbvk=\n'                                 +
    '-----END CERTIFICATE-----'

let caPemZh: string =
  '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIIBlDCCATqgAwIBAgIUUx7GjuLeFC9f1yynoTZrpmYcKKYwCgYIKoZIzj0EAwIw\n' +
    'PjELMAkGA1UEBhMCQ04xGTAXBgNVBAoMEFJvb3QgQ0EgQ29ycCDmoLkxFDASBgNV\n' +
    'BAMMC1Jvb3QgQ0Eg5qC5MB4XDTI1MDQxNDExMTgzM1oXDTM1MDQxMjExMTgzM1ow\n' +
    'PjELMAkGA1UEBhMCQ04xGTAXBgNVBAoMEFJvb3QgQ0EgQ29ycCDmoLkxFDASBgNV\n' +
    'BAMMC1Jvb3QgQ0Eg5qC5MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE81102cdB\n' +
    'L08fkx5wxCG/mSQJdMu1xxpMGj2XUgenzbgYyHZ7ofe2YUTpWMjCIifhc4IVEZIN\n' +
    'UCleLn8xGa0x56MWMBQwEgYDVR0TAQH/BAgwBgEB/wIBAjAKBggqhkjOPQQDAgNI\n' +
    'ADBFAiEAolWYyEaFijGBI/SuEc6o4n7WUdkFjLRKTUJeSgdZhrcCIEU2J0TAqYyv\n' +
    'MGUzacduh8zp0BOC+65o9xcEhE3SQI10\n'                                 +
    '-----END CERTIFICATE-----'

let interPemZh: string =
  '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIIBpDCCAUqgAwIBAgIUe8ZyZme9A2eMurr+FFMx1VMcsSAwCgYIKoZIzj0EAwIw\n' +
    'PjELMAkGA1UEBhMCQ04xGTAXBgNVBAoMEFJvb3QgQ0EgQ29ycCDmoLkxFDASBgNV\n' +
    'BAMMC1Jvb3QgQ0Eg5qC5MB4XDTI1MDQxNDExMTgzM1oXDTMwMDQxMzExMTgzM1ow\n' +
    'TjELMAkGA1UEBhMCQ04xITAfBgNVBAoMGEludGVybWVkaWF0ZSBDQSBDb3JwIOag\n' +
    'uTEcMBoGA1UEAwwTSW50ZXJtZWRpYXRlIENBIOaguTBZMBMGByqGSM49AgEGCCqG\n' +
    'SM49AwEHA0IABNQx7KpHpTNn3IH8RWJFovnhDOhunvCd3qwA+JnOlMb+uFlWR9+G\n' +
    'K2fVwBDK6SfWRshjXDRHNlgwyFwW/6MRER6jFjAUMBIGA1UdEwEB/wQIMAYBAf8C\n' +
    'AQEwCgYIKoZIzj0EAwIDSAAwRQIhAOVFcYNW+4YM7O3QkLRyJlewfdO7Qf2JhZUd\n' +
    '1VFnIBtiAiAE0WLkHU505yMAcBy82JrcPlJrz+RI/AaQVJggChDaNg==\n'         +
    '-----END CERTIFICATE-----'

let subPemZh: string =
  '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIIB1TCCAXqgAwIBAgIUWtiIpmIHUuHgg/VbT4ZaL1XyhBEwCgYIKoZIzj0EAwIw\n' +
    'TjELMAkGA1UEBhMCQ04xITAfBgNVBAoMGEludGVybWVkaWF0ZSBDQSBDb3JwIOag\n' +
    'uTEcMBoGA1UEAwwTSW50ZXJtZWRpYXRlIENBIOaguTAeFw0yNTA0MTQxMTE4MzNa\n' +
    'Fw0yNjA0MTQxMTE4MzNaMHQxCzAJBgNVBAYTAkNOMRcwFQYDVQQIDA5CZWlqaW5n\n' +
    'IOWMl+S6rDEXMBUGA1UEBwwOQmVpamluZyDljJfkuqwxGTAXBgNVBAoMEEV4YW1w\n' +
    'bGUgQ29ycCDll6gxGDAWBgNVBAMMD2V4YW1wbGUuY29tIOS+izBZMBMGByqGSM49\n' +
    'AgEGCCqGSM49AwEHA0IABG8nx9wUfJRf6B6U2oCuF+8XLLON7xIBPSAYNJnL9BD8\n' +
    'BsWchcDiMiBVBZeLWq3Xm25hKuCvwM/NCNttixtC3FSjEDAOMAwGA1UdEwEB/wQC\n' +
    'MAAwCgYIKoZIzj0EAwIDSQAwRgIhALf2V8Fu8Da8fNi8q+Xs2nNagtohc7X6Uhkm\n' +
    'IGIoFO3xAiEA8kKITUqwI5TDSm18vb44sg2nm55WgYPZ6oIuchLq9mA=\n'         +
    '-----END CERTIFICATE-----'

let chainCrlPemZh: string =
  '-----BEGIN X509 CRL-----\n'                                         +
    'MIIBADCBpgIBATAKBggqhkjOPQQDAjBOMQswCQYDVQQGEwJDTjEhMB8GA1UECgwY\n' +
    'SW50ZXJtZWRpYXRlIENBIENvcnAg5qC5MRwwGgYDVQQDDBNJbnRlcm1lZGlhdGUg\n' +
    'Q0Eg5qC5Fw0yNTA0MTQxMTE4MzNaFw0yNTA1MTQxMTE4MzNaMCcwJQIUWtiIpmIH\n' +
    'UuHgg/VbT4ZaL1XyhBIXDTI1MDQxNDExMTgzM1owCgYIKoZIzj0EAwIDSQAwRgIh\n' +
    'AMIv/TgNlyuPeCzqOdEty2L5dj7dLr9MF99PgW8QcdTLAiEA8EkIaDXrkpI5I6dK\n' +
    'yT9WwWOIgtpEy+M+vfmuwe4x/qM=\n'                                     +
    '-----END X509 CRL-----'

let chainCrlPemEn: string =
  '-----BEGIN X509 CRL-----\n'                                         +
    'MIIBCTCBsAIBATAKBggqhkjOPQQDAjBYMQswCQYDVQQGEwJDTjEQMA4GA1UEBwwH\n' +
    'QmVpamluZzEdMBsGA1UECgwUSW50ZXJtZWRpYXRlIENBIENvcnAxGDAWBgNVBAMM\n' +
    'D0ludGVybWVkaWF0ZSBDQRcNMjUwNDE1MDY0NjExWhcNMjUwNTE1MDY0NjExWjAn\n' +
    'MCUCFD33zuzgd1ih1WclZoGPZAb/b5DWFw0yNTA0MTUwNjQ2MTFaMAoGCCqGSM49\n' +
    'BAMCA0gAMEUCIQC4KH6v+kJpSCsqmUSrMH5r9x/w9kmJf38gfvMTtk5jWgIgHfwv\n' +
    'LT2Q9FeUpivieU/NoL2wllQg7ST6IQQbuk4fn0g=\n'                         +
    '-----END X509 CRL-----'

let certNoSubjectPem: string =
  '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIIBYTCCAQagAwIBAgIUWtiIpmIHUuHgg/VbT4ZaL1XyhBEwCgYIKoZIzj0EAwIw\n' +
    'TjELMAkGA1UEBhMCQ04xITAfBgNVBAoMGEludGVybWVkaWF0ZSBDQSBDb3JwIOag\n' +
    'uTEcMBoGA1UEAwwTSW50ZXJtZWRpYXRlIENBIOaguTAeFw0yNTA0MTQxMTE4MzNa\n' +
    'Fw0yNjA0MTQxMTE4MzNaMAAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARvJ8fc\n' +
    'FHyUX+gelNqArhfvFyyzje8SAT0gGDSZy/QQ/AbFnIXA4jIgVQWXi1qt15tuYSrg\n' +
    'r8DPzQjbbYsbQtxUoxAwDjAMBgNVHRMBAf8EAjAAMAoGCCqGSM49BAMCA0kAMEYC\n' +
    'IQC39lfBbvA2vHzYvKvl7NpzWoLaIXO1+lIZJiBiKBTt8QIhAPJCiE1KsCOUw0pt\n' +
    'fL2+OLINp5ueVoGD2eqCLnIS6vZg\n'                                     +
    '-----END CERTIFICATE-----'

let certNoIssuerPem: string =
  '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIIBhzCCASygAwIBAgIUWtiIpmIHUuHgg/VbT4ZaL1XyhBEwCgYIKoZIzj0EAwIw\n' +
    'ADAeFw0yNTA0MTQxMTE4MzNaFw0yNjA0MTQxMTE4MzNaMHQxCzAJBgNVBAYTAkNO\n' +
    'MRcwFQYDVQQIDA5CZWlqaW5nIOWMl+S6rDEXMBUGA1UEBwwOQmVpamluZyDljJfk\n' +
    'uqwxGTAXBgNVBAoMEEV4YW1wbGUgQ29ycCDll6gxGDAWBgNVBAMMD2V4YW1wbGUu\n' +
    'Y29tIOS+izBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABG8nx9wUfJRf6B6U2oCu\n' +
    'F+8XLLON7xIBPSAYNJnL9BD8BsWchcDiMiBVBZeLWq3Xm25hKuCvwM/NCNttixtC\n' +
    '3FSjEDAOMAwGA1UdEwEB/wQCMAAwCgYIKoZIzj0EAwIDSQAwRgIhALf2V8Fu8Da8\n' +
    'fNi8q+Xs2nNagtohc7X6UhkmIGIoFO3xAiEA8kKITUqwI5TDSm18vb44sg2nm55W\n' +
    'gYPZ6oIuchLq9mA=\n'                                                 +
    '-----END CERTIFICATE-----'

// revoked crl and cert
let certCrlPemZh: string =
  '-----BEGIN X509 CRL-----\n'                                         +
    'MIIBQzCB6QIBATAKBggqhkjOPQQDAjCBkDELMAkGA1UEBhMCQ04xEDAOBgNVBAcM\n' +
    'B0JlaWppbmcxFTATBgNVBAcMDOS9oOWlvSBDaGluYTEXMBUGA1UEBwwO5L2g5aW9\n' +
    'IEJlaWppbmcxITAfBgNVBAoMGOWXqCBJbnRlcm1lZGlhdGUgQ0EgQ29ycDEcMBoG\n' +
    'A1UEAwwT5ZeoIEludGVybWVkaWF0ZSBDQRcNMjUwNDE1MDczNjEwWhcNMjUwNTE1\n' +
    'MDczNjEwWjAnMCUCFB761cq9lplO2kLDZ6DGWO/M1bUQFw0yNTA0MTUwNzM2MTBa\n' +
    'MAoGCCqGSM49BAMCA0kAMEYCIQCXeZBHaWfgYX+1+rCobt1Dnm9MhGnEhVLxnK+w\n' +
    'TIWwiQIhAMicXyOa1gyoyVJju9VP92jMKEv+wNmKYjGhrwfOqhYI\n'             +
    '-----END X509 CRL-----'

let certCrlPemEn: string =
  '-----BEGIN X509 CRL-----\n'                                         +
    'MIIBCDCBsAIBATAKBggqhkjOPQQDAjBYMQswCQYDVQQGEwJDTjEQMA4GA1UEBwwH\n' +
    'QmVpamluZzEdMBsGA1UECgwUSW50ZXJtZWRpYXRlIENBIENvcnAxGDAWBgNVBAMM\n' +
    'D0ludGVybWVkaWF0ZSBDQRcNMjUwNDE1MDczNjAxWhcNMjUwNTE1MDczNjAxWjAn\n' +
    'MCUCFGFCANvPepiLGRSBnUA7bqE2awITFw0yNTA0MTUwNzM2MDFaMAoGCCqGSM49\n' +
    'BAMCA0cAMEQCIAp8KtfmDPlh/g9vmF+z9b7g3mfbCJIY30ch+yAxOmXnAiAr9U1d\n' +
    '1jSToI8phWYNkDYHZMXq4H96kWKqCEQCzQ93Dw==\n'                         +
    '-----END X509 CRL-----'

let certCrlRevokedPemZh: string =
  '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIICLjCCAdWgAwIBAgIUHvrVyr2WmU7aQsNnoMZY78zVtRAwCgYIKoZIzj0EAwIw\n' +
    'gZAxCzAJBgNVBAYTAkNOMRAwDgYDVQQHDAdCZWlqaW5nMRUwEwYDVQQHDAzkvaDl\n' +
    'pb0gQ2hpbmExFzAVBgNVBAcMDuS9oOWlvSBCZWlqaW5nMSEwHwYDVQQKDBjll6gg\n' +
    'SW50ZXJtZWRpYXRlIENBIENvcnAxHDAaBgNVBAMME+WXqCBJbnRlcm1lZGlhdGUg\n' +
    'Q0EwHhcNMjUwNDE1MDczNjEwWhcNMjYwNDE1MDczNjEwWjCBizELMAkGA1UEBhMC\n' +
    'Q04xFzAVBgNVBAgMDuS9oOWlvSBCZWlqaW5nMRUwEwYDVQQHDAzkvaDlpb0gQ2hp\n' +
    'bmExFzAVBgNVBAcMDuS9oOWlvSBCZWlqaW5nMRkwFwYDVQQKDBDll6ggRXhhbXBs\n' +
    'ZSBDb3JwMRgwFgYDVQQDDA/ll6ggZXhhbXBsZS5jb20wWTATBgcqhkjOPQIBBggq\n' +
    'hkjOPQMBBwNCAARa015Ny3+bppiGXq36skLhNswA4w41jPQsePFBU/snChTySguZ\n' +
    'OiGAAW3QI5snw4RmXQ1tRKBi04GQUSJozKbXoxAwDjAMBgNVHRMBAf8EAjAAMAoG\n' +
    'CCqGSM49BAMCA0cAMEQCIB+ULJiAcTvmYEIwsvi9USkmCXNRArGkTWzIy+UF4DwE\n' +
    'AiAlhYFAoJwj/y/S2MKz291ZONGMUE4ueImSiCp7v3egQQ==\n'                 +
    '-----END CERTIFICATE-----'

let certCrlRevokedPemEn: string =
  '-----BEGIN CERTIFICATE-----\n'                                      +
    'MIIB2TCCAX6gAwIBAgIUYUIA2896mIsZFIGdQDtuoTZrAhMwCgYIKoZIzj0EAwIw\n' +
    'WDELMAkGA1UEBhMCQ04xEDAOBgNVBAcMB0JlaWppbmcxHTAbBgNVBAoMFEludGVy\n' +
    'bWVkaWF0ZSBDQSBDb3JwMRgwFgYDVQQDDA9JbnRlcm1lZGlhdGUgQ0EwHhcNMjUw\n' +
    'NDE1MDczNjAxWhcNMjYwNDE1MDczNjAxWjBuMQswCQYDVQQGEwJDTjEQMA4GA1UE\n' +
    'CAwHQmVpamluZzEOMAwGA1UEBwwFQ2hpbmExEDAOBgNVBAcMB0JlaWppbmcxFTAT\n' +
    'BgNVBAoMDEV4YW1wbGUgQ29ycDEUMBIGA1UEAwwLZXhhbXBsZS5jb20wWTATBgcq\n' +
    'hkjOPQIBBggqhkjOPQMBBwNCAAS7awvKIkB5jYdbL05We/LJ6FtUkh3LIv2KxCoc\n' +
    'iJ27IwuQy1Q36vY6IvlRITF2UvYA3u2ZGpwOYZiWtc7T5XFmoxAwDjAMBgNVHRMB\n' +
    'Af8EAjAAMAoGCCqGSM49BAMCA0kAMEYCIQCtH8WbbUAiZKY4b5XvbX4IbinOMyIZ\n' +
    'vk/jYbtzqmrcWAIhALEme7+7MF6uUIOMRzZ9+y+AwMeBF1H+AUaGn/9+9+GV\n'     +
    '-----END CERTIFICATE-----'

interface OH_Pkcs12Data {
  expectPriKeyPem: string;
  expectPriKeyDer: number[];
  priKeyPem: string;
  priKeyDer: number[];
  certDer: number[];
  certPem: string;
  otherCertDer: number[][];
  otherCertPem: string[];
}

/* PkCS12 测试数据 START */
let expectPriKeyPem: string = "-----BEGIN PRIVATE KEY-----\n" +
  "MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBALRINMIpQYR7ooMB\n" +
  "OB37F4BX4wZyjw7JOnLzUT5XF9DMPOJjHfVnT6NUfYi/qSO1/ztrquqW7eaueBId\n" +
  "3m40wFhPkHEbyfTczxTk8kCebWUDeWtb+i5WsetJy9u9105jS6uS4X879DnTBZUL\n" +
  "zV/VnSC4EUCRqQeHWnSpv16h48RlAgMBAAECgYBfyM1fK5RH03hwqkEqjLHb2tYg\n" +
  "ItWnQXrwgB52RMe+hAUFMyxDqnRBjy5zbYFsG9JTu8y/fxk/KwtYdM4tN5HJdYn3\n" +
  "uZDziINDapgGbtVnSrpf3au9FFsVPuMx02eKvp5/1Hm7mIWl3eJpWzVc4qq6zJaa\n" +
  "EXE5fe9Fp0h9cJS7AQJBANrSbBkmMBuTpNxLS2qTCVIB7F5YQP+ZwpYQxXoXvkBg\n" +
  "Z6NrBh607zjHyB9eQtmCMe12tN0/561Yl/j6RpXiCzUCQQDS6YFaNoIiUW+FK+BN\n" +
  "NEX9JtbVUQio78yFjnCWjWBkBSByb63ivqvFcLZEZ2hUL6eoVSbc8MsLQr1wpNPe\n" +
  "0cpxAkBenjIjxcFziyn0H5KiqKWVEkPUn7CrVR8wqFvbaTzYtVba8MIasP3nvWsp\n" +
  "NScOyh8woO2f5awV5oMAI6g10yIpAkASyBBoxCnafH390eZreZgx7t96p3ip8pC3\n" +
  "4/NKtNQ8k+hLyH4njusk7eCNPtgfhw7bApovWpH6MrtD6KmlUfFBAkAbh5YFUfay\n" +
  "PKT/DVVxHh4mzFnPMYo03xVo/Kyz0sRJ+MhmaZUrsknZKomZUnYpPKvtSc9Hg5Wq\n" +
  "iJA8w4Q8nvQe\n" +
  "-----END PRIVATE KEY-----\n";
let expectPriKeyDer: number[] = [
  0x30, 0x82, 0x02, 0x75, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
  0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x02, 0x5f, 0x30, 0x82, 0x02, 0x5b, 0x02, 0x01,
  0x00, 0x02, 0x81, 0x81, 0x00, 0xb4, 0x48, 0x34, 0xc2, 0x29, 0x41, 0x84, 0x7b, 0xa2, 0x83, 0x01,
  0x38, 0x1d, 0xfb, 0x17, 0x80, 0x57, 0xe3, 0x06, 0x72, 0x8f, 0x0e, 0xc9, 0x3a, 0x72, 0xf3, 0x51,
  0x3e, 0x57, 0x17, 0xd0, 0xcc, 0x3c, 0xe2, 0x63, 0x1d, 0xf5, 0x67, 0x4f, 0xa3, 0x54, 0x7d, 0x88,
  0xbf, 0xa9, 0x23, 0xb5, 0xff, 0x3b, 0x6b, 0xaa, 0xea, 0x96, 0xed, 0xe6, 0xae, 0x78, 0x12, 0x1d,
  0xde, 0x6e, 0x34, 0xc0, 0x58, 0x4f, 0x90, 0x71, 0x1b, 0xc9, 0xf4, 0xdc, 0xcf, 0x14, 0xe4, 0xf2,
  0x40, 0x9e, 0x6d, 0x65, 0x03, 0x79, 0x6b, 0x5b, 0xfa, 0x2e, 0x56, 0xb1, 0xeb, 0x49, 0xcb, 0xdb,
  0xbd, 0xd7, 0x4e, 0x63, 0x4b, 0xab, 0x92, 0xe1, 0x7f, 0x3b, 0xf4, 0x39, 0xd3, 0x05, 0x95, 0x0b,
  0xcd, 0x5f, 0xd5, 0x9d, 0x20, 0xb8, 0x11, 0x40, 0x91, 0xa9, 0x07, 0x87, 0x5a, 0x74, 0xa9, 0xbf,
  0x5e, 0xa1, 0xe3, 0xc4, 0x65, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x81, 0x80, 0x5f, 0xc8, 0xcd,
  0x5f, 0x2b, 0x94, 0x47, 0xd3, 0x78, 0x70, 0xaa, 0x41, 0x2a, 0x8c, 0xb1, 0xdb, 0xda, 0xd6, 0x20,
  0x22, 0xd5, 0xa7, 0x41, 0x7a, 0xf0, 0x80, 0x1e, 0x76, 0x44, 0xc7, 0xbe, 0x84, 0x05, 0x05, 0x33,
  0x2c, 0x43, 0xaa, 0x74, 0x41, 0x8f, 0x2e, 0x73, 0x6d, 0x81, 0x6c, 0x1b, 0xd2, 0x53, 0xbb, 0xcc,
  0xbf, 0x7f, 0x19, 0x3f, 0x2b, 0x0b, 0x58, 0x74, 0xce, 0x2d, 0x37, 0x91, 0xc9, 0x75, 0x89, 0xf7,
  0xb9, 0x90, 0xf3, 0x88, 0x83, 0x43, 0x6a, 0x98, 0x06, 0x6e, 0xd5, 0x67, 0x4a, 0xba, 0x5f, 0xdd,
  0xab, 0xbd, 0x14, 0x5b, 0x15, 0x3e, 0xe3, 0x31, 0xd3, 0x67, 0x8a, 0xbe, 0x9e, 0x7f, 0xd4, 0x79,
  0xbb, 0x98, 0x85, 0xa5, 0xdd, 0xe2, 0x69, 0x5b, 0x35, 0x5c, 0xe2, 0xaa, 0xba, 0xcc, 0x96, 0x9a,
  0x11, 0x71, 0x39, 0x7d, 0xef, 0x45, 0xa7, 0x48, 0x7d, 0x70, 0x94, 0xbb, 0x01, 0x02, 0x41, 0x00,
  0xda, 0xd2, 0x6c, 0x19, 0x26, 0x30, 0x1b, 0x93, 0xa4, 0xdc, 0x4b, 0x4b, 0x6a, 0x93, 0x09, 0x52,
  0x01, 0xec, 0x5e, 0x58, 0x40, 0xff, 0x99, 0xc2, 0x96, 0x10, 0xc5, 0x7a, 0x17, 0xbe, 0x40, 0x60,
  0x67, 0xa3, 0x6b, 0x06, 0x1e, 0xb4, 0xef, 0x38, 0xc7, 0xc8, 0x1f, 0x5e, 0x42, 0xd9, 0x82, 0x31,
  0xed, 0x76, 0xb4, 0xdd, 0x3f, 0xe7, 0xad, 0x58, 0x97, 0xf8, 0xfa, 0x46, 0x95, 0xe2, 0x0b, 0x35,
  0x02, 0x41, 0x00, 0xd2, 0xe9, 0x81, 0x5a, 0x36, 0x82, 0x22, 0x51, 0x6f, 0x85, 0x2b, 0xe0, 0x4d,
  0x34, 0x45, 0xfd, 0x26, 0xd6, 0xd5, 0x51, 0x08, 0xa8, 0xef, 0xcc, 0x85, 0x8e, 0x70, 0x96, 0x8d,
  0x60, 0x64, 0x05, 0x20, 0x72, 0x6f, 0xad, 0xe2, 0xbe, 0xab, 0xc5, 0x70, 0xb6, 0x44, 0x67, 0x68,
  0x54, 0x2f, 0xa7, 0xa8, 0x55, 0x26, 0xdc, 0xf0, 0xcb, 0x0b, 0x42, 0xbd, 0x70, 0xa4, 0xd3, 0xde,
  0xd1, 0xca, 0x71, 0x02, 0x40, 0x5e, 0x9e, 0x32, 0x23, 0xc5, 0xc1, 0x73, 0x8b, 0x29, 0xf4, 0x1f,
  0x92, 0xa2, 0xa8, 0xa5, 0x95, 0x12, 0x43, 0xd4, 0x9f, 0xb0, 0xab, 0x55, 0x1f, 0x30, 0xa8, 0x5b,
  0xdb, 0x69, 0x3c, 0xd8, 0xb5, 0x56, 0xda, 0xf0, 0xc2, 0x1a, 0xb0, 0xfd, 0xe7, 0xbd, 0x6b, 0x29,
  0x35, 0x27, 0x0e, 0xca, 0x1f, 0x30, 0xa0, 0xed, 0x9f, 0xe5, 0xac, 0x15, 0xe6, 0x83, 0x00, 0x23,
  0xa8, 0x35, 0xd3, 0x22, 0x29, 0x02, 0x40, 0x12, 0xc8, 0x10, 0x68, 0xc4, 0x29, 0xda, 0x7c, 0x7d,
  0xfd, 0xd1, 0xe6, 0x6b, 0x79, 0x98, 0x31, 0xee, 0xdf, 0x7a, 0xa7, 0x78, 0xa9, 0xf2, 0x90, 0xb7,
  0xe3, 0xf3, 0x4a, 0xb4, 0xd4, 0x3c, 0x93, 0xe8, 0x4b, 0xc8, 0x7e, 0x27, 0x8e, 0xeb, 0x24, 0xed,
  0xe0, 0x8d, 0x3e, 0xd8, 0x1f, 0x87, 0x0e, 0xdb, 0x02, 0x9a, 0x2f, 0x5a, 0x91, 0xfa, 0x32, 0xbb,
  0x43, 0xe8, 0xa9, 0xa5, 0x51, 0xf1, 0x41, 0x02, 0x40, 0x1b, 0x87, 0x96, 0x05, 0x51, 0xf6, 0xb2,
  0x3c, 0xa4, 0xff, 0x0d, 0x55, 0x71, 0x1e, 0x1e, 0x26, 0xcc, 0x59, 0xcf, 0x31, 0x8a, 0x34, 0xdf,
  0x15, 0x68, 0xfc, 0xac, 0xb3, 0xd2, 0xc4, 0x49, 0xf8, 0xc8, 0x66, 0x69, 0x95, 0x2b, 0xb2, 0x49,
  0xd9, 0x2a, 0x89, 0x99, 0x52, 0x76, 0x29, 0x3c, 0xab, 0xed, 0x49, 0xcf, 0x47, 0x83, 0x95, 0xaa,
  0x88, 0x90, 0x3c, 0xc3, 0x84, 0x3c, 0x9e, 0xf4, 0x1e
];
let priKeyPem: string = "-----BEGIN RSA PRIVATE KEY-----\n" +
  "MIICWwIBAAKBgQC0SDTCKUGEe6KDATgd+xeAV+MGco8OyTpy81E+VxfQzDziYx31\n" +
  "Z0+jVH2Iv6kjtf87a6rqlu3mrngSHd5uNMBYT5BxG8n03M8U5PJAnm1lA3lrW/ou\n" +
  "VrHrScvbvddOY0urkuF/O/Q50wWVC81f1Z0guBFAkakHh1p0qb9eoePEZQIDAQAB\n" +
  "AoGAX8jNXyuUR9N4cKpBKoyx29rWICLVp0F68IAedkTHvoQFBTMsQ6p0QY8uc22B\n" +
  "bBvSU7vMv38ZPysLWHTOLTeRyXWJ97mQ84iDQ2qYBm7VZ0q6X92rvRRbFT7jMdNn\n" +
  "ir6ef9R5u5iFpd3iaVs1XOKqusyWmhFxOX3vRadIfXCUuwECQQDa0mwZJjAbk6Tc\n" +
  "S0tqkwlSAexeWED/mcKWEMV6F75AYGejawYetO84x8gfXkLZgjHtdrTdP+etWJf4\n" +
  "+kaV4gs1AkEA0umBWjaCIlFvhSvgTTRF/SbW1VEIqO/MhY5wlo1gZAUgcm+t4r6r\n" +
  "xXC2RGdoVC+nqFUm3PDLC0K9cKTT3tHKcQJAXp4yI8XBc4sp9B+SoqillRJD1J+w\n" +
  "q1UfMKhb22k82LVW2vDCGrD9571rKTUnDsofMKDtn+WsFeaDACOoNdMiKQJAEsgQ\n" +
  "aMQp2nx9/dHma3mYMe7feqd4qfKQt+PzSrTUPJPoS8h+J47rJO3gjT7YH4cO2wKa\n" +
  "L1qR+jK7Q+ippVHxQQJAG4eWBVH2sjyk/w1VcR4eJsxZzzGKNN8VaPyss9LESfjI\n" +
  "ZmmVK7JJ2SqJmVJ2KTyr7UnPR4OVqoiQPMOEPJ70Hg==\n" +
  "-----END RSA PRIVATE KEY-----";
let priKeyDer: number[] = [
  0x30, 0x82, 0x02, 0x75, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
  0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x02, 0x5f, 0x30, 0x82, 0x02, 0x5b, 0x02, 0x01,
  0x00, 0x02, 0x81, 0x81, 0x00, 0xb4, 0x48, 0x34, 0xc2, 0x29, 0x41, 0x84, 0x7b, 0xa2, 0x83, 0x01,
  0x38, 0x1d, 0xfb, 0x17, 0x80, 0x57, 0xe3, 0x06, 0x72, 0x8f, 0x0e, 0xc9, 0x3a, 0x72, 0xf3, 0x51,
  0x3e, 0x57, 0x17, 0xd0, 0xcc, 0x3c, 0xe2, 0x63, 0x1d, 0xf5, 0x67, 0x4f, 0xa3, 0x54, 0x7d, 0x88,
  0xbf, 0xa9, 0x23, 0xb5, 0xff, 0x3b, 0x6b, 0xaa, 0xea, 0x96, 0xed, 0xe6, 0xae, 0x78, 0x12, 0x1d,
  0xde, 0x6e, 0x34, 0xc0, 0x58, 0x4f, 0x90, 0x71, 0x1b, 0xc9, 0xf4, 0xdc, 0xcf, 0x14, 0xe4, 0xf2,
  0x40, 0x9e, 0x6d, 0x65, 0x03, 0x79, 0x6b, 0x5b, 0xfa, 0x2e, 0x56, 0xb1, 0xeb, 0x49, 0xcb, 0xdb,
  0xbd, 0xd7, 0x4e, 0x63, 0x4b, 0xab, 0x92, 0xe1, 0x7f, 0x3b, 0xf4, 0x39, 0xd3, 0x05, 0x95, 0x0b,
  0xcd, 0x5f, 0xd5, 0x9d, 0x20, 0xb8, 0x11, 0x40, 0x91, 0xa9, 0x07, 0x87, 0x5a, 0x74, 0xa9, 0xbf,
  0x5e, 0xa1, 0xe3, 0xc4, 0x65, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x81, 0x80, 0x5f, 0xc8, 0xcd,
  0x5f, 0x2b, 0x94, 0x47, 0xd3, 0x78, 0x70, 0xaa, 0x41, 0x2a, 0x8c, 0xb1, 0xdb, 0xda, 0xd6, 0x20,
  0x22, 0xd5, 0xa7, 0x41, 0x7a, 0xf0, 0x80, 0x1e, 0x76, 0x44, 0xc7, 0xbe, 0x84, 0x05, 0x05, 0x33,
  0x2c, 0x43, 0xaa, 0x74, 0x41, 0x8f, 0x2e, 0x73, 0x6d, 0x81, 0x6c, 0x1b, 0xd2, 0x53, 0xbb, 0xcc,
  0xbf, 0x7f, 0x19, 0x3f, 0x2b, 0x0b, 0x58, 0x74, 0xce, 0x2d, 0x37, 0x91, 0xc9, 0x75, 0x89, 0xf7,
  0xb9, 0x90, 0xf3, 0x88, 0x83, 0x43, 0x6a, 0x98, 0x06, 0x6e, 0xd5, 0x67, 0x4a, 0xba, 0x5f, 0xdd,
  0xab, 0xbd, 0x14, 0x5b, 0x15, 0x3e, 0xe3, 0x31, 0xd3, 0x67, 0x8a, 0xbe, 0x9e, 0x7f, 0xd4, 0x79,
  0xbb, 0x98, 0x85, 0xa5, 0xdd, 0xe2, 0x69, 0x5b, 0x35, 0x5c, 0xe2, 0xaa, 0xba, 0xcc, 0x96, 0x9a,
  0x11, 0x71, 0x39, 0x7d, 0xef, 0x45, 0xa7, 0x48, 0x7d, 0x70, 0x94, 0xbb, 0x01, 0x02, 0x41, 0x00,
  0xda, 0xd2, 0x6c, 0x19, 0x26, 0x30, 0x1b, 0x93, 0xa4, 0xdc, 0x4b, 0x4b, 0x6a, 0x93, 0x09, 0x52,
  0x01, 0xec, 0x5e, 0x58, 0x40, 0xff, 0x99, 0xc2, 0x96, 0x10, 0xc5, 0x7a, 0x17, 0xbe, 0x40, 0x60,
  0x67, 0xa3, 0x6b, 0x06, 0x1e, 0xb4, 0xef, 0x38, 0xc7, 0xc8, 0x1f, 0x5e, 0x42, 0xd9, 0x82, 0x31,
  0xed, 0x76, 0xb4, 0xdd, 0x3f, 0xe7, 0xad, 0x58, 0x97, 0xf8, 0xfa, 0x46, 0x95, 0xe2, 0x0b, 0x35,
  0x02, 0x41, 0x00, 0xd2, 0xe9, 0x81, 0x5a, 0x36, 0x82, 0x22, 0x51, 0x6f, 0x85, 0x2b, 0xe0, 0x4d,
  0x34, 0x45, 0xfd, 0x26, 0xd6, 0xd5, 0x51, 0x08, 0xa8, 0xef, 0xcc, 0x85, 0x8e, 0x70, 0x96, 0x8d,
  0x60, 0x64, 0x05, 0x20, 0x72, 0x6f, 0xad, 0xe2, 0xbe, 0xab, 0xc5, 0x70, 0xb6, 0x44, 0x67, 0x68,
  0x54, 0x2f, 0xa7, 0xa8, 0x55, 0x26, 0xdc, 0xf0, 0xcb, 0x0b, 0x42, 0xbd, 0x70, 0xa4, 0xd3, 0xde,
  0xd1, 0xca, 0x71, 0x02, 0x40, 0x5e, 0x9e, 0x32, 0x23, 0xc5, 0xc1, 0x73, 0x8b, 0x29, 0xf4, 0x1f,
  0x92, 0xa2, 0xa8, 0xa5, 0x95, 0x12, 0x43, 0xd4, 0x9f, 0xb0, 0xab, 0x55, 0x1f, 0x30, 0xa8, 0x5b,
  0xdb, 0x69, 0x3c, 0xd8, 0xb5, 0x56, 0xda, 0xf0, 0xc2, 0x1a, 0xb0, 0xfd, 0xe7, 0xbd, 0x6b, 0x29,
  0x35, 0x27, 0x0e, 0xca, 0x1f, 0x30, 0xa0, 0xed, 0x9f, 0xe5, 0xac, 0x15, 0xe6, 0x83, 0x00, 0x23,
  0xa8, 0x35, 0xd3, 0x22, 0x29, 0x02, 0x40, 0x12, 0xc8, 0x10, 0x68, 0xc4, 0x29, 0xda, 0x7c, 0x7d,
  0xfd, 0xd1, 0xe6, 0x6b, 0x79, 0x98, 0x31, 0xee, 0xdf, 0x7a, 0xa7, 0x78, 0xa9, 0xf2, 0x90, 0xb7,
  0xe3, 0xf3, 0x4a, 0xb4, 0xd4, 0x3c, 0x93, 0xe8, 0x4b, 0xc8, 0x7e, 0x27, 0x8e, 0xeb, 0x24, 0xed,
  0xe0, 0x8d, 0x3e, 0xd8, 0x1f, 0x87, 0x0e, 0xdb, 0x02, 0x9a, 0x2f, 0x5a, 0x91, 0xfa, 0x32, 0xbb,
  0x43, 0xe8, 0xa9, 0xa5, 0x51, 0xf1, 0x41, 0x02, 0x40, 0x1b, 0x87, 0x96, 0x05, 0x51, 0xf6, 0xb2,
  0x3c, 0xa4, 0xff, 0x0d, 0x55, 0x71, 0x1e, 0x1e, 0x26, 0xcc, 0x59, 0xcf, 0x31, 0x8a, 0x34, 0xdf,
  0x15, 0x68, 0xfc, 0xac, 0xb3, 0xd2, 0xc4, 0x49, 0xf8, 0xc8, 0x66, 0x69, 0x95, 0x2b, 0xb2, 0x49,
  0xd9, 0x2a, 0x89, 0x99, 0x52, 0x76, 0x29, 0x3c, 0xab, 0xed, 0x49, 0xcf, 0x47, 0x83, 0x95, 0xaa,
  0x88, 0x90, 0x3c, 0xc3, 0x84, 0x3c, 0x9e, 0xf4, 0x1e
];
let certDer: number[] = [
  0x30, 0x82, 0x02, 0x78, 0x30, 0x82, 0x01, 0xe1, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x22,
  0xed, 0xf9, 0x93, 0xb6, 0x82, 0x51, 0xce, 0x56, 0xd0, 0x2b, 0x4d, 0xd3, 0xdb, 0x0e, 0x79, 0x3b,
  0xef, 0xa0, 0x58, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b,
  0x05, 0x00, 0x30, 0x4e, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43,
  0x4e, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x73, 0x68, 0x61, 0x6e,
  0x20, 0x78, 0x69, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x05, 0x78, 0x69,
  0x20, 0x61, 0x6e, 0x31, 0x0d, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x04, 0x64, 0x65,
  0x6d, 0x6f, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x05, 0x63, 0x6f, 0x64,
  0x65, 0x72, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x38, 0x32, 0x37, 0x30, 0x33, 0x34, 0x31,
  0x30, 0x36, 0x5a, 0x17, 0x0d, 0x33, 0x35, 0x30, 0x38, 0x32, 0x35, 0x30, 0x33, 0x34, 0x31, 0x30,
  0x36, 0x5a, 0x30, 0x4e, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43,
  0x4e, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x73, 0x68, 0x61, 0x6e,
  0x20, 0x78, 0x69, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x05, 0x78, 0x69,
  0x20, 0x61, 0x6e, 0x31, 0x0d, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x04, 0x64, 0x65,
  0x6d, 0x6f, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x05, 0x63, 0x6f, 0x64,
  0x65, 0x72, 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
  0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xb4,
  0x48, 0x34, 0xc2, 0x29, 0x41, 0x84, 0x7b, 0xa2, 0x83, 0x01, 0x38, 0x1d, 0xfb, 0x17, 0x80, 0x57,
  0xe3, 0x06, 0x72, 0x8f, 0x0e, 0xc9, 0x3a, 0x72, 0xf3, 0x51, 0x3e, 0x57, 0x17, 0xd0, 0xcc, 0x3c,
  0xe2, 0x63, 0x1d, 0xf5, 0x67, 0x4f, 0xa3, 0x54, 0x7d, 0x88, 0xbf, 0xa9, 0x23, 0xb5, 0xff, 0x3b,
  0x6b, 0xaa, 0xea, 0x96, 0xed, 0xe6, 0xae, 0x78, 0x12, 0x1d, 0xde, 0x6e, 0x34, 0xc0, 0x58, 0x4f,
  0x90, 0x71, 0x1b, 0xc9, 0xf4, 0xdc, 0xcf, 0x14, 0xe4, 0xf2, 0x40, 0x9e, 0x6d, 0x65, 0x03, 0x79,
  0x6b, 0x5b, 0xfa, 0x2e, 0x56, 0xb1, 0xeb, 0x49, 0xcb, 0xdb, 0xbd, 0xd7, 0x4e, 0x63, 0x4b, 0xab,
  0x92, 0xe1, 0x7f, 0x3b, 0xf4, 0x39, 0xd3, 0x05, 0x95, 0x0b, 0xcd, 0x5f, 0xd5, 0x9d, 0x20, 0xb8,
  0x11, 0x40, 0x91, 0xa9, 0x07, 0x87, 0x5a, 0x74, 0xa9, 0xbf, 0x5e, 0xa1, 0xe3, 0xc4, 0x65, 0x02,
  0x03, 0x01, 0x00, 0x01, 0xa3, 0x53, 0x30, 0x51, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04,
  0x16, 0x04, 0x14, 0xa7, 0x63, 0x27, 0x8e, 0xf2, 0xbf, 0x59, 0xd9, 0x7c, 0x73, 0x8e, 0xa2, 0xaf,
  0x04, 0x8a, 0xdf, 0x6b, 0xea, 0x84, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18,
  0x30, 0x16, 0x80, 0x14, 0xa7, 0x63, 0x27, 0x8e, 0xf2, 0xbf, 0x59, 0xd9, 0x7c, 0x73, 0x8e, 0xa2,
  0xaf, 0x04, 0x8a, 0xdf, 0x6b, 0xea, 0x84, 0x21, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01,
  0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,
  0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x57, 0xc2, 0x45, 0xa6,
  0x2f, 0x62, 0x64, 0x3b, 0xb0, 0xbe, 0x66, 0xca, 0xfb, 0x7a, 0x07, 0x6f, 0xd7, 0x5c, 0xf3, 0x5f,
  0x73, 0x3b, 0x50, 0x2d, 0xc3, 0x46, 0x05, 0x62, 0xd2, 0x6b, 0x6d, 0xb6, 0xe3, 0x35, 0x11, 0x04,
  0xc6, 0x60, 0x6f, 0x40, 0x07, 0xda, 0xb1, 0xc9, 0x49, 0x57, 0xf1, 0xaa, 0xf0, 0x20, 0x68, 0xbd,
  0xbd, 0xd5, 0x59, 0x31, 0x1e, 0x63, 0x9d, 0xb8, 0xc7, 0x38, 0x3c, 0xaa, 0x18, 0x08, 0xa0, 0xad,
  0xf1, 0x5d, 0x90, 0xbe, 0x56, 0x36, 0x71, 0xa5, 0xca, 0x44, 0x98, 0xd8, 0xf1, 0x24, 0x15, 0x8e,
  0x9e, 0x8a, 0x8b, 0x48, 0x79, 0xa8, 0xd4, 0xb4, 0x40, 0xa5, 0x8f, 0xf0, 0x85, 0x26, 0xe5, 0x3f,
  0x38, 0x6b, 0x16, 0x20, 0xe3, 0x60, 0xea, 0x81, 0xa3, 0x45, 0xbc, 0xe7, 0x51, 0xb7, 0x9d, 0xbd,
  0xfa, 0x75, 0x7a, 0xc8, 0x67, 0xbd, 0xaf, 0xe5, 0x16, 0x16, 0x53, 0x2a
];
let certPem: string = "-----BEGIN CERTIFICATE-----\n" +
  "MIICeDCCAeGgAwIBAgIUIu35k7aCUc5W0CtN09sOeTvvoFgwDQYJKoZIhvcNAQEL\n" +
  "BQAwTjELMAkGA1UEBhMCQ04xEDAOBgNVBAgMB3NoYW4geGkxDjAMBgNVBAcMBXhp\n" +
  "IGFuMQ0wCwYDVQQKDARkZW1vMQ4wDAYDVQQDDAVjb2RlcjAeFw0yNTA4MjcwMzQx\n" +
  "MDZaFw0zNTA4MjUwMzQxMDZaME4xCzAJBgNVBAYTAkNOMRAwDgYDVQQIDAdzaGFu\n" +
  "IHhpMQ4wDAYDVQQHDAV4aSBhbjENMAsGA1UECgwEZGVtbzEOMAwGA1UEAwwFY29k\n" +
  "ZXIwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALRINMIpQYR7ooMBOB37F4BX\n" +
  "4wZyjw7JOnLzUT5XF9DMPOJjHfVnT6NUfYi/qSO1/ztrquqW7eaueBId3m40wFhP\n" +
  "kHEbyfTczxTk8kCebWUDeWtb+i5WsetJy9u9105jS6uS4X879DnTBZULzV/VnSC4\n" +
  "EUCRqQeHWnSpv16h48RlAgMBAAGjUzBRMB0GA1UdDgQWBBSnYyeO8r9Z2XxzjqKv\n" +
  "BIrfa+qEITAfBgNVHSMEGDAWgBSnYyeO8r9Z2XxzjqKvBIrfa+qEITAPBgNVHRMB\n" +
  "Af8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GBAFfCRaYvYmQ7sL5myvt6B2/XXPNf\n" +
  "cztQLcNGBWLSa2224zURBMZgb0AH2rHJSVfxqvAgaL291VkxHmOduMc4PKoYCKCt\n" +
  "8V2QvlY2caXKRJjY8SQVjp6Ki0h5qNS0QKWP8IUm5T84axYg42DqgaNFvOdRt529\n" +
  "+nV6yGe9r+UWFlMq\n" +
  "-----END CERTIFICATE-----\n";
let otherCertDer1: number[] = [
  0x30, 0x82, 0x02, 0xd3, 0x30, 0x82, 0x02, 0x3c, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x72,
  0x25, 0xc9, 0x05, 0x4a, 0xb2, 0xeb, 0xc8, 0xd9, 0xc8, 0x94, 0x60, 0xa7, 0x49, 0xb3, 0x03, 0xb6,
  0xde, 0x65, 0xba, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b,
  0x05, 0x00, 0x30, 0x78, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43,
  0x4e, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x09, 0x59, 0x6f, 0x75, 0x72,
  0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x08,
  0x59, 0x6f, 0x75, 0x72, 0x43, 0x69, 0x74, 0x79, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04,
  0x0a, 0x0c, 0x10, 0x59, 0x6f, 0x75, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
  0x69, 0x6f, 0x6e, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x08, 0x59, 0x6f,
  0x75, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c,
  0x0b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0x0d,
  0x32, 0x35, 0x30, 0x38, 0x32, 0x37, 0x30, 0x34, 0x30, 0x33, 0x35, 0x38, 0x5a, 0x17, 0x0d, 0x33,
  0x35, 0x30, 0x38, 0x32, 0x35, 0x30, 0x34, 0x30, 0x33, 0x35, 0x38, 0x5a, 0x30, 0x78, 0x31, 0x0b,
  0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4e, 0x31, 0x12, 0x30, 0x10, 0x06,
  0x03, 0x55, 0x04, 0x08, 0x0c, 0x09, 0x59, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x31,
  0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x08, 0x59, 0x6f, 0x75, 0x72, 0x43, 0x69,
  0x74, 0x79, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x10, 0x59, 0x6f, 0x75,
  0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x11, 0x30,
  0x0f, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x08, 0x59, 0x6f, 0x75, 0x72, 0x55, 0x6e, 0x69, 0x74,
  0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x70,
  0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,
  0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02,
  0x81, 0x81, 0x00, 0xb4, 0x48, 0x34, 0xc2, 0x29, 0x41, 0x84, 0x7b, 0xa2, 0x83, 0x01, 0x38, 0x1d,
  0xfb, 0x17, 0x80, 0x57, 0xe3, 0x06, 0x72, 0x8f, 0x0e, 0xc9, 0x3a, 0x72, 0xf3, 0x51, 0x3e, 0x57,
  0x17, 0xd0, 0xcc, 0x3c, 0xe2, 0x63, 0x1d, 0xf5, 0x67, 0x4f, 0xa3, 0x54, 0x7d, 0x88, 0xbf, 0xa9,
  0x23, 0xb5, 0xff, 0x3b, 0x6b, 0xaa, 0xea, 0x96, 0xed, 0xe6, 0xae, 0x78, 0x12, 0x1d, 0xde, 0x6e,
  0x34, 0xc0, 0x58, 0x4f, 0x90, 0x71, 0x1b, 0xc9, 0xf4, 0xdc, 0xcf, 0x14, 0xe4, 0xf2, 0x40, 0x9e,
  0x6d, 0x65, 0x03, 0x79, 0x6b, 0x5b, 0xfa, 0x2e, 0x56, 0xb1, 0xeb, 0x49, 0xcb, 0xdb, 0xbd, 0xd7,
  0x4e, 0x63, 0x4b, 0xab, 0x92, 0xe1, 0x7f, 0x3b, 0xf4, 0x39, 0xd3, 0x05, 0x95, 0x0b, 0xcd, 0x5f,
  0xd5, 0x9d, 0x20, 0xb8, 0x11, 0x40, 0x91, 0xa9, 0x07, 0x87, 0x5a, 0x74, 0xa9, 0xbf, 0x5e, 0xa1,
  0xe3, 0xc4, 0x65, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x5a, 0x30, 0x58, 0x30, 0x0e, 0x06, 0x03,
  0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x1d, 0x06, 0x03,
  0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
  0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x27, 0x06, 0x03, 0x55,
  0x1d, 0x11, 0x04, 0x20, 0x30, 0x1e, 0x82, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
  0x63, 0x6f, 0x6d, 0x82, 0x0f, 0x77, 0x77, 0x77, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
  0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
  0x0b, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x6a, 0xcd, 0xd7, 0x6c, 0xc8, 0x37, 0x70, 0x73, 0x88,
  0xda, 0x6c, 0xa9, 0xe3, 0xac, 0xf6, 0xb7, 0xef, 0xbe, 0x75, 0x24, 0xf4, 0x6e, 0x9d, 0x16, 0xf6,
  0xe1, 0x87, 0x43, 0xcf, 0x6a, 0x4f, 0x88, 0xb8, 0x4b, 0x5a, 0x4a, 0x87, 0xe3, 0x21, 0x5c, 0xd3,
  0x7d, 0x65, 0x9a, 0x31, 0x1c, 0xa3, 0x9d, 0xd6, 0xb9, 0x1a, 0x6b, 0xd9, 0x5d, 0x1f, 0x9c, 0xea,
  0xff, 0xfc, 0x4c, 0x58, 0xf4, 0x16, 0xca, 0x2e, 0x4c, 0x66, 0x13, 0x5c, 0xcd, 0xcb, 0xc8, 0x3c,
  0xeb, 0x3b, 0xc5, 0x30, 0x9b, 0x30, 0x25, 0x94, 0x09, 0xe7, 0x5c, 0x6e, 0x41, 0x46, 0x9b, 0x11,
  0x04, 0x86, 0xea, 0xa5, 0x13, 0xc4, 0x19, 0xd3, 0x12, 0x2e, 0xb3, 0x1a, 0x66, 0xfe, 0x84, 0xce,
  0x89, 0xa1, 0xec, 0x6f, 0xf1, 0x6c, 0x42, 0x64, 0xfb, 0x8c, 0xe2, 0xca, 0x49, 0xc4, 0x5b, 0x27,
  0x68, 0x4f, 0x10, 0xe6, 0x99, 0xb1, 0xb2
];
let otherCertDer2: number[] = [
  0x30, 0x82, 0x02, 0x78, 0x30, 0x82, 0x01, 0xe1, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x6d,
  0x92, 0x4a, 0x1f, 0x93, 0x8a, 0xc1, 0xb0, 0x2c, 0x82, 0x0d, 0xba, 0x1f, 0x75, 0x0e, 0xdf, 0x86,
  0xdf, 0x1e, 0x36, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b,
  0x05, 0x00, 0x30, 0x4e, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43,
  0x4e, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x73, 0x68, 0x61, 0x6e,
  0x20, 0x78, 0x69, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x05, 0x78, 0x69,
  0x20, 0x61, 0x6e, 0x31, 0x0d, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x04, 0x64, 0x65,
  0x6d, 0x6f, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x05, 0x63, 0x6f, 0x64,
  0x65, 0x72, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x38, 0x32, 0x38, 0x30, 0x37, 0x30, 0x35,
  0x32, 0x36, 0x5a, 0x17, 0x0d, 0x33, 0x35, 0x30, 0x38, 0x32, 0x36, 0x30, 0x37, 0x30, 0x35, 0x32,
  0x36, 0x5a, 0x30, 0x4e, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43,
  0x4e, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x07, 0x73, 0x68, 0x61, 0x6e,
  0x20, 0x78, 0x69, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x05, 0x78, 0x69,
  0x20, 0x61, 0x6e, 0x31, 0x0d, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x04, 0x64, 0x65,
  0x6d, 0x6f, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x05, 0x63, 0x6f, 0x64,
  0x65, 0x72, 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
  0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xc6,
  0x73, 0x7c, 0x8e, 0x4f, 0xfd, 0x0e, 0x09, 0xc4, 0x7f, 0x11, 0x76, 0x9c, 0xd8, 0xbe, 0xaa, 0xe3,
  0x62, 0xa9, 0xc2, 0xdc, 0xad, 0x6c, 0xea, 0xf9, 0x35, 0xc8, 0x4b, 0xfe, 0x3d, 0x64, 0x9a, 0x81,
  0x88, 0x85, 0x60, 0x83, 0x79, 0x2a, 0x27, 0xa5, 0xe4, 0xec, 0x1c, 0x54, 0xea, 0x2b, 0xea, 0xaf,
  0x31, 0xfa, 0xc2, 0xec, 0xa5, 0x12, 0xe4, 0x79, 0x86, 0x29, 0x6d, 0xd8, 0x8a, 0xf5, 0xf8, 0x6a,
  0x5a, 0x09, 0x48, 0x0a, 0x2f, 0x3f, 0x8a, 0xfc, 0xa8, 0x8a, 0xe5, 0xd2, 0x10, 0xa0, 0xef, 0xd6,
  0xa8, 0x17, 0x5c, 0x74, 0x74, 0x03, 0xfd, 0x35, 0x2b, 0x5c, 0x09, 0xf0, 0x52, 0xad, 0x84, 0x21,
  0x1c, 0xd1, 0x63, 0xb7, 0x5f, 0x07, 0x4c, 0x81, 0x77, 0x99, 0xda, 0x46, 0x39, 0xdc, 0xe2, 0xd1,
  0x0e, 0xa1, 0x72, 0x05, 0xa9, 0x42, 0xe5, 0x57, 0x5f, 0x29, 0x7f, 0x6c, 0x30, 0x14, 0xf1, 0x02,
  0x03, 0x01, 0x00, 0x01, 0xa3, 0x53, 0x30, 0x51, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04,
  0x16, 0x04, 0x14, 0x41, 0x7f, 0x40, 0x3a, 0xe5, 0x0d, 0x54, 0x19, 0x48, 0xc3, 0xb0, 0x7b, 0x4c,
  0x9f, 0x4a, 0xdc, 0x35, 0x8e, 0xa3, 0xad, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18,
  0x30, 0x16, 0x80, 0x14, 0x41, 0x7f, 0x40, 0x3a, 0xe5, 0x0d, 0x54, 0x19, 0x48, 0xc3, 0xb0, 0x7b,
  0x4c, 0x9f, 0x4a, 0xdc, 0x35, 0x8e, 0xa3, 0xad, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01,
  0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,
  0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x40, 0x7b, 0x3d, 0x5a,
  0x43, 0x57, 0xaa, 0x0a, 0x87, 0x35, 0x82, 0x6d, 0x13, 0xb8, 0x01, 0x1b, 0x02, 0x2b, 0xad, 0x5b,
  0x7d, 0x42, 0xe5, 0x1d, 0x8d, 0xea, 0x83, 0x60, 0xae, 0x41, 0x6f, 0xe5, 0x82, 0x40, 0x0b, 0xbb,
  0x88, 0xf4, 0x00, 0x1f, 0xc4, 0x5e, 0x50, 0xd4, 0x37, 0x23, 0x37, 0x0e, 0xd4, 0x76, 0x86, 0x85,
  0xa6, 0xc8, 0x23, 0x97, 0xb4, 0x99, 0xe3, 0x35, 0xcb, 0xe7, 0x11, 0x64, 0xa4, 0x3e, 0xf2, 0x0c,
  0xd2, 0x06, 0x6a, 0xa1, 0xbc, 0x69, 0x20, 0xec, 0x39, 0xb0, 0x32, 0x5f, 0x77, 0x01, 0xbb, 0x3d,
  0xc5, 0x63, 0xac, 0xf8, 0xf3, 0xc2, 0xa2, 0x8a, 0x09, 0x75, 0xa1, 0xa3, 0xb2, 0x67, 0x78, 0x4d,
  0x14, 0x15, 0x3f, 0xa9, 0x77, 0x75, 0x7e, 0x40, 0x98, 0xf9, 0xf0, 0x28, 0x29, 0x0d, 0xdf, 0x01,
  0x84, 0xbc, 0x75, 0x77, 0x11, 0x78, 0x85, 0xb5, 0xad, 0x31, 0x08, 0x66
];
/* 私钥签发的证书 */
let otherCertPem1: string = "-----BEGIN CERTIFICATE-----\n" +
  "MIIC0zCCAjygAwIBAgIUciXJBUqy68jZyJRgp0mzA7beZbowDQYJKoZIhvcNAQEL\n" +
  "BQAweDELMAkGA1UEBhMCQ04xEjAQBgNVBAgMCVlvdXJTdGF0ZTERMA8GA1UEBwwI\n" +
  "WW91ckNpdHkxGTAXBgNVBAoMEFlvdXJPcmdhbml6YXRpb24xETAPBgNVBAsMCFlv\n" +
  "dXJVbml0MRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0yNTA4MjcwNDAzNThaFw0z\n" +
  "NTA4MjUwNDAzNThaMHgxCzAJBgNVBAYTAkNOMRIwEAYDVQQIDAlZb3VyU3RhdGUx\n" +
  "ETAPBgNVBAcMCFlvdXJDaXR5MRkwFwYDVQQKDBBZb3VyT3JnYW5pemF0aW9uMREw\n" +
  "DwYDVQQLDAhZb3VyVW5pdDEUMBIGA1UEAwwLZXhhbXBsZS5jb20wgZ8wDQYJKoZI\n" +
  "hvcNAQEBBQADgY0AMIGJAoGBALRINMIpQYR7ooMBOB37F4BX4wZyjw7JOnLzUT5X\n" +
  "F9DMPOJjHfVnT6NUfYi/qSO1/ztrquqW7eaueBId3m40wFhPkHEbyfTczxTk8kCe\n" +
  "bWUDeWtb+i5WsetJy9u9105jS6uS4X879DnTBZULzV/VnSC4EUCRqQeHWnSpv16h\n" +
  "48RlAgMBAAGjWjBYMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcD\n" +
  "AQYIKwYBBQUHAwIwJwYDVR0RBCAwHoILZXhhbXBsZS5jb22CD3d3dy5leGFtcGxl\n" +
  "LmNvbTANBgkqhkiG9w0BAQsFAAOBgQBqzddsyDdwc4jabKnjrPa37751JPRunRb2\n" +
  "4YdDz2pPiLhLWkqH4yFc031lmjEco53WuRpr2V0fnOr//ExY9BbKLkxmE1zNy8g8\n" +
  "6zvFMJswJZQJ51xuQUabEQSG6qUTxBnTEi6zGmb+hM6Joexv8WxCZPuM4spJxFsn\n" +
  "aE8Q5pmxsg==\n" +
  "-----END CERTIFICATE-----";
/* 其他证书 */
let otherCertPem2: string = "-----BEGIN CERTIFICATE-----\n" +
  "MIICeDCCAeGgAwIBAgIUbZJKH5OKwbAsgg26H3UO34bfHjYwDQYJKoZIhvcNAQEL\n" +
  "BQAwTjELMAkGA1UEBhMCQ04xEDAOBgNVBAgMB3NoYW4geGkxDjAMBgNVBAcMBXhp\n" +
  "IGFuMQ0wCwYDVQQKDARkZW1vMQ4wDAYDVQQDDAVjb2RlcjAeFw0yNTA4MjgwNzA1\n" +
  "MjZaFw0zNTA4MjYwNzA1MjZaME4xCzAJBgNVBAYTAkNOMRAwDgYDVQQIDAdzaGFu\n" +
  "IHhpMQ4wDAYDVQQHDAV4aSBhbjENMAsGA1UECgwEZGVtbzEOMAwGA1UEAwwFY29k\n" +
  "ZXIwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMZzfI5P/Q4JxH8RdpzYvqrj\n" +
  "YqnC3K1s6vk1yEv+PWSagYiFYIN5Kiel5OwcVOor6q8x+sLspRLkeYYpbdiK9fhq\n" +
  "WglICi8/ivyoiuXSEKDv1qgXXHR0A/01K1wJ8FKthCEc0WO3XwdMgXeZ2kY53OLR\n" +
  "DqFyBalC5VdfKX9sMBTxAgMBAAGjUzBRMB0GA1UdDgQWBBRBf0A65Q1UGUjDsHtM\n" +
  "n0rcNY6jrTAfBgNVHSMEGDAWgBRBf0A65Q1UGUjDsHtMn0rcNY6jrTAPBgNVHRMB\n" +
  "Af8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GBAEB7PVpDV6oKhzWCbRO4ARsCK61b\n" +
  "fULlHY3qg2CuQW/lgkALu4j0AB/EXlDUNyM3DtR2hoWmyCOXtJnjNcvnEWSkPvIM\n" +
  "0gZqobxpIOw5sDJfdwG7PcVjrPjzwqKKCXWho7JneE0UFT+pd3V+QJj58CgpDd8B\n" +
  "hLx1dxF4hbWtMQhm\n" +
  "-----END CERTIFICATE-----";
/* PkCS12 测试数据 END */

let RSA_PEM: OH_Pkcs12Data = {
  expectPriKeyDer: expectPriKeyDer,
  expectPriKeyPem: expectPriKeyPem,
  priKeyPem: priKeyPem,
  priKeyDer: priKeyDer,
  certDer: certDer,
  certPem: certPem,
  otherCertDer: [otherCertDer1, otherCertDer2],
  otherCertPem: [otherCertPem1, otherCertPem2]
}

let IS_PEM: boolean         = true;
let IS_SYNC: boolean        = true;
let NEED_PRIV_KEY: boolean  = true;
let NEED_CA: boolean        = true;
let NEED_OTHER_CA: boolean  = true;
let ONLY_OTHER: boolean     = true;

function stringToUint8Array(str: string): Uint8Array {
  let arr: Array<number> = [];
  for (let i = 0, j = str.length; i < j; i++) {
    arr.push(str.charCodeAt(i));
  }
  return new Uint8Array(arr);
}

class OH_Pkcs12DataMap {
  DSA_ALG_NAME: string     = "DSA";
  X25519_ALG_NAME: string  = "X25519";
  ED25519_ALG_NAME: string = "Ed25519";
  SM2_ALG_NAME: string     = "SM2";
  RSA_ALG_NAME: string     = "RSA";
  DH_ALG_NAME: string      = "DH";

  DataMap: HashMap<string, OH_Pkcs12Data> = new HashMap<string, OH_Pkcs12Data>();

  constructor(isNull: boolean = true, algName?: string, data?: OH_Pkcs12Data) {
    if (algName && data) {
      this.DataMap.set(algName, (data as OH_Pkcs12Data));
    }
    if (!isNull) {
      this.DataMap.set(this.RSA_ALG_NAME, RSA_PEM);
    }
  }

  getVectorData(algName: string): OH_Pkcs12Data {
    let vector: OH_Pkcs12Data = this.DataMap.get(algName);

    return vector;
  }

  async getPkcs12Data(algName: string, isPem: boolean = true, needPriKey: boolean = true,
    needCaCert: boolean = true, needOtherCerts: boolean = true): Promise<cert.Pkcs12Data> {
    let encodingBlob: cert.EncodingBlob | undefined = undefined;
    let otherCerts: Array<cert.X509Cert> = [];
    let caCert: cert.X509Cert | undefined = undefined;
    let pkcs12Data: cert.Pkcs12Data = {} as cert.Pkcs12Data;
    let vector: OH_Pkcs12Data = this.DataMap.get(algName);
    try {
      if (isPem) {
        if (needCaCert) {
          encodingBlob = {
            data: stringToUint8Array(vector.certPem),
            encodingFormat: cert.EncodingFormat.FORMAT_PEM
          };
          caCert = await cert.createX509Cert(encodingBlob);
          pkcs12Data.cert = caCert;
        }
        if (needOtherCerts) {
          for (let other of vector.otherCertPem) {
            encodingBlob = {
              data: stringToUint8Array(other),
              encodingFormat: cert.EncodingFormat.FORMAT_PEM
            };
            let tmp: cert.X509Cert = await cert.createX509Cert(encodingBlob);
            otherCerts.push(tmp);
          }
        }
        if (needPriKey) {
          pkcs12Data.privateKey = vector.priKeyPem;
        }
      } else {
        if (needCaCert) {
          encodingBlob = {
            data: new Uint8Array(vector.certDer),
            encodingFormat: cert.EncodingFormat.FORMAT_DER
          };
          caCert = await cert.createX509Cert(encodingBlob);
          pkcs12Data.cert = caCert;
        }
        if (needOtherCerts) {
          for (let other of vector.otherCertDer) {
            encodingBlob = {
              data: new Uint8Array(other),
              encodingFormat: cert.EncodingFormat.FORMAT_DER
            };
            let tmp: cert.X509Cert = await cert.createX509Cert(encodingBlob);
            otherCerts.push(tmp);
          }
        }
        if (needPriKey) {
          pkcs12Data.privateKey = new Uint8Array(vector.priKeyDer);
        }
      }
    } catch (error) {
      console.error(`getPkcs12Data ${error}, error code: ${error.code}`);
      throw error as Error;
    }
    console.log("############# add otherCert count:" + otherCerts.length);
    pkcs12Data.otherCerts = otherCerts;

    return pkcs12Data;
  }

  setPbesParams(saltLen: number, iterations: number, encryptionAlgorithm: cert.PbesEncryptionAlgorithm): cert.PbesParams {
    let pbesParams:cert.PbesParams = {
      saltLen: saltLen,
      iterations: iterations,
      encryptionAlgorithm: encryptionAlgorithm
    }

    return pbesParams;
  }

  async createPkcs12(algName: string, config: cert.Pkcs12CreationConfig, isSync: boolean = false, isPem: boolean = true,
    needPriKey: boolean = true, needCaCert: boolean = true, needOtherCerts: boolean = true): Promise<Uint8Array> {
    let pkcs12Data: Uint8Array = new Uint8Array();
    let vector: cert.Pkcs12Data = await this.getPkcs12Data(algName, isPem, needPriKey, needCaCert, needOtherCerts);
    try {
      if (!isSync) {
        pkcs12Data = await cert.createPkcs12(vector, config);
      } else {
        pkcs12Data = cert.createPkcs12Sync(vector, config);
      }
    } catch (error) {
      console.error(`createPkcs12 ${error}, error code: ${error.code}`);
      throw error as Error;
    }

    return pkcs12Data;
  }

  async parsePkcs12(pkcs12Data: Uint8Array, config: cert.Pkcs12ParsingConfig,
    isPem: boolean = false): Promise<cert.Pkcs12Data> {
    try {
      let p12: cert.Pkcs12Data = {} as cert.Pkcs12Data;
      if (!isPem) {
        p12 = cert.parsePkcs12(pkcs12Data, config);
      } else {
        p12 = await cert.parsePkcs12(pkcs12Data, config.password);
      }

      return p12;
    } catch (error) {
      console.error(`parsePkcs12 ${error}, error code: ${error.code}`);
      throw error as Error;
    }
  }

  async checkPkcs12(algName: string, p12: cert.Pkcs12Data, isPem: boolean = true, isOnlyOtherCerts: boolean = false,
    checkPriKey: boolean = true, checkCaCert: boolean = true, checkOtherCerts: boolean = true): Promise<boolean> {
    let ret: boolean = true;
    let index: number = -1;
    try {
      let vector: OH_Pkcs12Data = this.getVectorData(algName);
      if (checkPriKey && p12.privateKey) {
        if (!(p12.privateKey instanceof Uint8Array)) {
          ret = ret && compareString(vector.expectPriKeyPem, p12.privateKey);
        } else {
          ret = ret && compareUint8Array(new Uint8Array(vector.expectPriKeyDer), p12.privateKey);
          console.log("############### ret:" + ret);
        }
      } else if (checkPriKey && !p12.privateKey) {
        console.log("############# no priKey but checkPriKey is true");
        ret = false;
      }
      if (checkCaCert && p12.cert) {
        let x509Cert: cert.X509Cert = await this.createCaX509Cert(algName, isPem);
        await x509Cert.verify(p12.cert.getPublicKey());
        console.log("############### ca cert verify success");
      } else if (checkCaCert && !p12.cert) {
        console.log("############# no ca cert but checkCaCert is true");
        ret = false;
      }
      if (checkOtherCerts && p12.otherCerts && p12.otherCerts.length > 0) {
          index = 0;
          console.log("############# otherCerts count:" + p12.otherCerts.length);
          /* 创建p12时，如果未添加公钥证书，只添加了私钥，和1本私钥签发的其他证书1本其他证书，p12解析后该私钥签发的其他证书存放在证书里面 */
          if (isPem && p12.otherCerts.length < vector.otherCertPem.length) {
            index += 1;
          } else if (!isPem && p12.otherCerts.length < vector.otherCertDer.length) {
            index += 1;
          }
          /* 创建p12时，如果未添加私钥，添加了公钥证书，p12解析后该公钥证书存放在其他证书里面 */
          if (!checkPriKey && checkOtherCerts && !isOnlyOtherCerts) {
            let caCert: cert.X509Cert | undefined = p12.otherCerts.shift();
            if (caCert !== undefined) {
              let x509Cert: cert.X509Cert = await this.createCaX509Cert(algName, isPem);
              await x509Cert.verify(caCert.getPublicKey());
              console.log("############### other ca cert verify success");
            } else {
              console.log("############# no other ca cert");
              ret = false;
            }
          }
          for (let cert of p12.otherCerts) {
            let x509Cert: cert.X509Cert = await this.createOtherX509Cert(algName, index, isPem);
            await x509Cert.verify(cert.getPublicKey());
            index += 1;
          }
        console.log("############# index:" + index);
      } else if (checkOtherCerts && (!p12.otherCerts || p12.otherCerts.length === 0)) {
        console.log("############# no other certs but checkOtherCerts is true");
        ret = false;
      }
      console.log("############# check end");
    } catch (error) {
      console.error(`checkPkcs12 ${error}, error code: ${error.code} otherCert:${index}`);
      ret = false;
    }

    return ret;
  }

  async createCaX509Cert(algName: string, isPem: boolean = true): Promise<cert.X509Cert> {
    let encodingBlob: cert.EncodingBlob = {} as cert.EncodingBlob;
    let vector: OH_Pkcs12Data = this.getVectorData(algName);
    if (isPem) {
      encodingBlob = {
        data: stringTouInt8Array(vector.certPem),
        encodingFormat: cert.EncodingFormat.FORMAT_PEM
      };
    } else {
      encodingBlob = {
        data: new Uint8Array(vector.certDer),
        encodingFormat: cert.EncodingFormat.FORMAT_DER
      };
    }
    try {
      let x509Cert: cert.X509Cert = await cert.createX509Cert(encodingBlob);
      return x509Cert;
    } catch (error) {
      console.error(`createCaX509Cert ${error}, error code: ${error.code}`);
      throw error as Error;
    }
  }

  async createOtherX509Cert(algName: string, index: number, isPem: boolean = true): Promise<cert.X509Cert> {
    let encodingBlob: cert.EncodingBlob = {} as cert.EncodingBlob;
    let vector: OH_Pkcs12Data = this.getVectorData(algName);
    if (isPem) {
      encodingBlob = {
        data: stringTouInt8Array(vector.otherCertPem[index]),
        encodingFormat: cert.EncodingFormat.FORMAT_PEM
      };
    } else {
      encodingBlob = {
        data: new Uint8Array(vector.otherCertDer[index]),
        encodingFormat: cert.EncodingFormat.FORMAT_DER
      };
    }
    try {
      let x509Cert: cert.X509Cert = await cert.createX509Cert(encodingBlob);
      return x509Cert;
    } catch (error) {
      console.error(`createOtherX509Cert ${error}, error code: ${error.code}`);
      throw error as Error;
    }
  }
}

async function createX509Cert(inStream: string): Promise<cert.X509Cert> {
  let encodingBlob: cert.EncodingBlob = {
    data: stringTouInt8Array(inStream),
    encodingFormat: cert.EncodingFormat.FORMAT_PEM

  };
  let x509Cert: cert.X509Cert = await cert.createX509Cert(encodingBlob);

  return x509Cert;
}

async function getRevokedCerts(crl: cert.X509CRL): Promise<cert.X509CRLEntry[]> {
  return new Promise((resolve, reject) => {
    crl.getRevokedCerts((err, crlEntries) => {
      if (err) {
        reject(err);
      } else {
        resolve(crlEntries);
      }
    });
  });
}

function setPbesParams(saltLen: number, iterations: number = 2048,
  encryptionAlgorithm: number = cert.PbesEncryptionAlgorithm.AES_256_CBC): cert.PbesParams {
  try {
    let PbesParams: cert.PbesParams = {
      saltLen: saltLen,
      iterations: iterations,
      encryptionAlgorithm: encryptionAlgorithm
    };
    return PbesParams;
  } catch (error) {
    console.error(`setPbesParams ${error}, error code: ${error.code}`);
    throw error as Error;
  }
}

function setMacParams(saltLen: number, iterations: number = 2048,
  macDigestAlgorithm: number = cert.Pkcs12MacDigestAlgorithm.SHA256): cert.Pkcs12CreationConfig {
  try {
    let config: cert.Pkcs12CreationConfig = {
      password: "123456",
      macSaltLen: saltLen,
      macIterations: iterations,
      macDigestAlgorithm: macDigestAlgorithm
    };
    return config;
  } catch (error) {
    console.error(`setMacParams ${error}, error code: ${error.code}`);
    throw error as Error;
  }
}

let stressTimeout: number = 2000 * 2;
let intervalTime: number = 1000;

export {
  certPemZh,
  certPemEn,
  certPemMultipleCNZh,
  DNZh,
  DNEn,
  chainPemZh,
  certErrorCNPem,
  caPemZh,
  interPemZh,
  subPemZh,
  chainCrlPemZh,
  chainCrlPemEn,
  createX509Cert,
  certNoSubjectPem,
  certNoIssuerPem,
  certCrlPemZh,
  certCrlPemEn,
  certCrlRevokedPemZh,
  certCrlRevokedPemEn,
  getRevokedCerts,
  stringToUint8Array,
  IS_PEM,
  IS_SYNC,
  NEED_PRIV_KEY,
  NEED_CA,
  NEED_OTHER_CA,
  ONLY_OTHER,
  OH_Pkcs12Data,
  OH_Pkcs12DataMap,
  priKeyPem,
  certPem,
  otherCertPem1,
  otherCertPem2,
  setPbesParams,
  setMacParams,
  stressTimeout,
  intervalTime
}