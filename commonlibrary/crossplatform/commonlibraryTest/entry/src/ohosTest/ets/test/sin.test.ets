/*
 * Copyright (C) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect, Level, Size, TestType} from "@ohos/hypium";
import { Decimal } from '@kit.ArkTS';
type Rounding = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
function test_sin_001 (n: string, pr: number, rm: Rounding, expected: string) {
  Decimal.set({ precision: pr, rounding: rm });
  expect(expected).assertEqual(Decimal.sin(n).valueOf());
  expect(expected).assertEqual(new Decimal(n).sin().valueOf());
}
export default function SinTest() {
  describe("SinTest", () => {
    beforeAll(() => {
      console.info("beforeAll: Prerequisites at the test suite level, which are executed before the test suite is executed.");
    });
    beforeEach(() => {
      console.info("beforeEach: Prerequisites at the test case level, which are executed before each test case is executed.");
    });
    afterEach(() => {
      console.info("afterEach: Test case-level clearance conditions, which are executed after each test case is executed.");
    });
    afterAll(() => {
      console.info("afterAll: Test suite-level cleanup condition, which is executed after the test suite is executed");
    });
    console.info("start################################start");

    /**
     * @tc.number    : SUB_COMMONLIBRARY_DECIMAL_SIN_0100
     * @tc.name      : testSin0001
     * @tc.desc      : Test sin
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 1
     */
    it("testSin0001", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      Decimal.set ({
        precision: 40,
        rounding: 4,
        toExpNeg: -9e15,
        toExpPos: 9e15,
        minE: -9e15,
        maxE: 9e15
      });
      test_sin_001('NaN', 40, 4, 'NaN');
      test_sin_001('0', 20, 4, '0');
      test_sin_001('-0', 20, 4, '-0');
      test_sin_001('Infinity', 40, 4, 'NaN');
      test_sin_001('-Infinity', 40, 4, 'NaN');
      test_sin_001('93332358216', 48, 5, '0.000816283943127306029649893248669685836695194145277');
      test_sin_001('766737078569022420173292205068953186848344673451240027655054631094318050', 18, 6, '0.00111135055272494455');
      test_sin_001('0.359136383962093189473162700700590970518456985109181875257764726415814563424613193774806585890478208084275468196568294033', 38, 1, '0.35146584650000000000000000000000000006');
      test_sin_001('3202222222227222222222222222222224222222222222222222222222.222222222222222222222222222', 7, 0, '0.5499568');
      test_sin_001('8', 5, 6, '0.98936');
      test_sin_001('0.15865555', 6, 0, '0.157991');
      test_sin_001('4.752', 5, 5, '-0.99922');
      test_sin_001('82315980453524767298085693995239044972', 5, 6, '0.18971');
      test_sin_001('9975666666', 10, 4, '-0.1932244457');
      test_sin_001('8111111111111111222222222222222.1118', 8, 4, '0.93383768');
      test_sin_001('1582389099446045988.444444444164077777777777777777', 3, 5, '0.145');
      test_sin_001('42.29499991999999919999999919', 2, 5, '-0.99');
      test_sin_001('2', 3, 1, '0.909');
      test_sin_001('225204831071708162873414430801935442203', 3, 4, '-0.367');
      test_sin_001('70387777777777777777', 6, 6, '-0.903662');
      test_sin_001('0.000009960105486531367489163480390414384530151948706557615588133070855712559603', 5, 3, '0.0000099601');
      test_sin_001('2.3', 1, 5, '0.7');
      test_sin_001('0.0369897655941305860082440964', 1, 0, '0.04');
      test_sin_001('93333333333.1111111113333335607254506018497853948241554833333333', 1, 4, '1');
      test_sin_001('0.81475726', 10, 2, '0.7275590895');
      test_sin_001('0.0020719', 5, 2, '0.0020719');
      test_sin_001('0.822309454290117043180146453820530722', 3, 2, '0.733');
      test_sin_001('811801481366184919659088.161679696898591', 8, 0, '-0.33739172');
      test_sin_001('82222222239', 6, 1, '0.85357');
      test_sin_001('0.671515352458', 4, 1, '0.6221');
      test_sin_001('0.1', 10, 2, '0.09983341665');
      test_sin_001('30.4507', 5, 0, '-0.82218');
      test_sin_001('82539', 1, 6, '0.06');
      test_sin_001('7904297312438003184', 8, 1, '0.88548151');
      test_sin_001('1555591677261255189013625216076301609467761280', 4, 4, '0.6012');
      test_sin_001('0.206', 5, 0, '0.20455');
      test_sin_001('47.85', 4, 3, '-0.664');
      test_sin_001('354522', 6, 0, '-0.432959');
      test_sin_001('57111.555555555551111', 9, 1, '-0.51645502');
      test_sin_001('5084117035723528870966332457.91693481159599044107', 10, 0, '0.5456651665');
      test_sin_001('66', 3, 2, '-0.0265');
      test_sin_001('4415133931290705273393593393689.69701970681754754956578240920056', 3, 4, '0.651');
      test_sin_001('4641', 4, 1, '-0.7628');
      test_sin_001('60782.222222', 3, 0, '-0.967');
      test_sin_001('9295.7', 4, 1, '0.2692');
      test_sin_001('660060.8', 5, 6, '-0.3736');
      test_sin_001('86', 7, 0, '-0.9234585');
      test_sin_001('0.867224365334893476015547423881141062327495194226274166759019810427983958472019', 7, 0, '0.7625362');
      test_sin_001('35', 9, 4, '-0.428182669');
      test_sin_001('6.4522', 4, 2, '0.1683');
      test_sin_001('74298341154961724283464838063126436742467617925325544', 6, 5, '0.381838');
      test_sin_001('98.9', 1, 3, '-1');
      test_sin_001('8719985534823285.8450271997', 5, 4, '-0.43915');
      test_sin_001('0.9528405', 9, 0, '0.815064492');
      test_sin_001('3007.440843', 1, 3, '-0.9');
      test_sin_001('8821000', 9, 3, '-0.999820738');
      test_sin_001('0.7244', 2, 5, '0.66');
      test_sin_001('223798525254185007541841321707204622.59819179923', 16, 1, '0.7304638404669184');
      test_sin_001('29832077939805655500490926756388', 31, 5, '0.9999881003434971787558628446047');
      test_sin_001('13555555555555.00000000000000000472565', 49, 1, '0.6767787926553990715415556952412713237217924208783');
      test_sin_001('899998709983400169781485597598985275361858454653904477166', 80, 0, '-0.9619682988852763093696947825524296540074948329137260856105387448568258894882118');
      test_sin_001('39826881720735191122621609200399853', 63, 6, '0.808868299975611790138921415253062939870563699821120858587818528');
      test_sin_001('0.005341982048471623278003226810889859381173803701969742990587783072822', 70, 4, '0.005341956641353734027312587021500975661701907307617983686735841700502311');
      test_sin_001('277.9997777777777716692059399741498679999', 30, 6, '0.999514190524582708045097875864');
      test_sin_001('61429536536284373.1373681766492167', 72, 0, '-0.987289391477952440400357263926723647295916567423922849613191038848150249');
      test_sin_001('7499999999909999997.909999999999', 71, 4, '0.34301339416705489181513042461845425762147177499632116466434976820897798');
      test_sin_001('349999995999999999939992999.92', 78, 4, '0.470719374558628137654141208065693026899676258865423797523069796274766223234845');
      test_sin_001('44510000000002060000000000000000.0200000008', 20, 5, '0.94842545081726504808');
      test_sin_001('62222222222293973777.555555555555577777777777', 20, 1, '0.97474440584787996681');
      test_sin_001('0.00000075952439582097539633', 49, 6, '0.0000007595243958209023709318824206298992320090760083707');
      test_sin_001('6466917226846635097989717000204.490981137498768', 23, 6, '-0.5067890798594245927272');
      test_sin_001('90000000000000007122', 12, 0, '-0.953061948465');
      test_sin_001('0.422029137363394323', 22, 5, '0.4096123952171808560627');
      test_sin_001('818.843', 70, 1, '0.8968883045810930941510638401062405075664719019866066309176929107557629');
      test_sin_001('30000000000000000200000000000003000000000000005.0000009', 50, 2, '-0.12313481713171373142907951990491671356466363502241');
      test_sin_001('975675853314022371079225', 48, 5, '0.880137190184686438889125592539968640170534430859');
      test_sin_001('0.00000066558889026', 77, 6, '0.00000066558889025995085640282676346670712623242127613563915036627009080674622220984');
      test_sin_001('69299999.9999999999999', 46, 5, '-0.3462252058608000475638742067375334366431550575');
      test_sin_001('8111111111267488711.9286432453434826269588597', 62, 4, '-0.99113853372157352283292183868051054140090305817866106070973511');
      test_sin_001('82', 71, 0, '0.31322878243308515263353199729481870255069002611658346075413062493460387');
      test_sin_001('488826170909042284127242210428971', 76, 6, '0.8995289099301142050732477297866877720021805553317366849920338096104233105207');
      test_sin_001('9092229227242222522222222222.66', 18, 0, '-0.935465793019682237');
      test_sin_001('5805959970379373082098495883210891370.0067111', 46, 6, '0.2201197700332631564419599177639647998475543596');
      test_sin_001('926600000000000000590', 41, 2, '0.81228550764810620054247659502626219692234');
      test_sin_001('619490746366110587736593084360', 65, 1, '0.21194121003724604936564767272815880572843184525364715905320674006');
      test_sin_001('5473424', 25, 0, '0.09262060997310434002923837');
      test_sin_001('5666666666666666666666666666666666666666666666616666626.6666', 87, 4, '-0.977239495645491722400759456250446932597508047794151805593705662875402907345001472700784');
      test_sin_001('499999.99999899999999999999999999999999999', 78, 5, '0.177832185579176104658571003320627225266903968719990210539163985433843099469721');
      test_sin_001('900000', 117, 3, '0.316282026370992050734738815532587276379228020456998295610327862506624971973233544404550831654146703508761520381016242');
      test_sin_001('83027766684462236825322.62114650623171519639122521318', 12, 4, '-0.476316326483');
      test_sin_001('925910897623', 129, 5, '0.792868652237225000804927754028414838623611710010734993138551247754919869022556217868513568705036768423332287103460206126685907362');
      test_sin_001('2918961308828646648994639730677467564302490828837720043486456401538236854705425586479512418277497121841759061091363', 23, 0, '-0.80586906475943044297492');
      test_sin_001('800000000000000', 13, 2, '0.9931677199759');
      test_sin_001('18400003.16100000000000032', 8, 6, '0.27307495');
      test_sin_001('99.999999999999999999999999999999999999999999999993', 63, 4, '-0.506365641109758793656557610459785432065032721296693555549406261');
      test_sin_001('20694757397464803355324887435556580472151471', 24, 6, '-0.0958707304545699270391254');
      test_sin_001('333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333.33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333335', 171, 3, '0.999861104212610844432827649084650490692662683912806434297051730891484017620891490814751729807506108594451118885277110368312661669230716203945478379798471281336247356157603');
      test_sin_001('22011131111011111.111111611113111111111151111111', 143, 2, '0.82582504036277799386306063085803210583251158969990606609364360685569588545519071481543672724620118406694191888115120286393881609546697317692404');
      test_sin_001('996270725099515169352424536636186062915113219400094989.8763797268889422850038402633796294758036260533902551191769915343780424028900449342752548782035', 46, 2, '0.6613706114081017074779805460666900787572253475');
      test_sin_001('0.780360750628373', 37, 5, '0.7035358359376557390803090830882458906');
      test_sin_001('5900', 14, 4, '0.08887912368108');
    });

    /**
     * @tc.number    : SUB_COMMONLIBRARY_DECIMAL_SIN_0200
     * @tc.name      : testSin0002
     * @tc.desc      : Test sin
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 1
     */
    it("testSin0002", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      Decimal.set ({
        precision: 40,
        rounding: 4,
        toExpNeg: -9e15,
        toExpPos: 9e15,
        minE: -9e15,
        maxE: 9e15
      });
      try {
        test_sin_001('e11', 40, 4, 'NaN');
        expect(true).assertEqual(false);
      } catch (err) {
        expect(err.name).assertEqual(`BusinessError`);
        expect(err.code).assertEqual(401);
        expect(err.message).assertEqual(`The type of "test(str)" must be Hex/Binary/Octal. Received value is: e11`);
      }
    });
  });
}