/*
 * Copyright (C) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect, Level, Size, TestType} from "@ohos/hypium";
import { Decimal } from '@kit.ArkTS';
export default function DecimalPlacesTest() {
  describe("DecimalPlacesTest", () => {
    beforeAll(() => {
      console.info("beforeAll: Prerequisites at the test suite level, which are executed before the test suite is executed.");
    });
    beforeEach(() => {
      console.info("beforeEach: Prerequisites at the test case level, which are executed before each test case is executed.");
    });
    afterEach(() => {
      console.info("afterEach: Test case-level clearance conditions, which are executed after each test case is executed.");
    });
    afterAll(() => {
      console.info("afterAll: Test suite-level cleanup condition, which is executed after the test suite is executed");
    });
    console.info("start################################start");

    /**
     * @tc.number    : SUB_COMMONLIBRARY_DECIMAL_DECIMAL_PLACES_0100
     * @tc.name      : testDecimalPlaces0001
     * @tc.desc      : Test decimalPlaces
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 1
     */
    it("testDecimalPlaces0001", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      Decimal.set({
        precision: 20,
        rounding: 4,
        toExpNeg: -7,
        toExpPos: 21,
        minE: -9e15,
        maxE: 9e15
      });
      expect(0).assertEqual(new Decimal(0).decimalPlaces());
      expect(1).assertEqual(new Decimal(1.2).decimalPlaces());
      expect(2).assertEqual(new Decimal(1.23).decimalPlaces());
      expect(3).assertEqual(new Decimal(1.234).decimalPlaces());
      expect(4).assertEqual(new Decimal(1.2345).decimalPlaces());
      expect(5).assertEqual(new Decimal(1.23456).decimalPlaces());
      expect(6).assertEqual(new Decimal(1.234567).decimalPlaces());
    });
  });
}