/*
 * Copyright (C) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect, Level, Size, TestType} from "@ohos/hypium";
import { Decimal } from '@kit.ArkTS';
type Rounding = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
function test_cbrt_001 (n: string, pr: number, rm: Rounding, expected: string) {
  Decimal.set ({ precision: pr, rounding: rm });
  expect(expected).assertEqual(Decimal.cbrt(n).valueOf());
}
async function Delay(delay: number): Promise<void> {
  return new Promise((resolve:Function)=>{
    setTimeout(()=>{
      resolve('Hello World!');
    },delay);
  });
}
export default function CbrtTest() {
  describe("CbrtTest", () => {
    beforeAll(() => {
      console.info("beforeAll: Prerequisites at the test suite level, which are executed before the test suite is executed.");
    });
    beforeEach(async() => {
      await Delay(1000);
      console.info("beforeEach: Prerequisites at the test case level, which are executed before each test case is executed.");
    });
    afterEach(() => {
      console.info("afterEach: Test case-level clearance conditions, which are executed after each test case is executed.");
    });
    afterAll(() => {
      console.info("afterAll: Test suite-level cleanup condition, which is executed after the test suite is executed");
    });
    console.info("start################################start");

    /**
     * @tc.number    : SUB_COMMONLIBRARY_DECIMAL_CBRT_0100
     * @tc.name      : testCbrt0001
     * @tc.desc      : Test cbrt
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 1
     */
    it("testCbrt0001", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      Decimal.set ({
        precision: 40,
        rounding: 4,
        toExpNeg: -9e15,
        toExpPos: 9e15,
        minE: -9e15,
        maxE: 9e15
      });
      test_cbrt_001('NaN', 40, 4, 'NaN');
      test_cbrt_001('0', 40, 4, '0');
      test_cbrt_001('-0', 40, 4, '-0');
      test_cbrt_001('Infinity', 40, 4, 'Infinity');
      test_cbrt_001('-Infinity', 40, 4, '-Infinity');
      test_cbrt_001('1', 40, 4, '1');
      test_cbrt_001('-1', 40, 4, '-1');
      test_cbrt_001('8', 40, 4, '2');
      test_cbrt_001('-8', 40, 4, '-2');
      test_cbrt_001('-4', 5, 2, '-1.5874');
      test_cbrt_001('-0.8667', 7, 0, '-0.9534318');
      test_cbrt_001('-0.0000000071', 9, 2, '-0.00192199734');
      test_cbrt_001('-21791364.26687703933853824404550506158463693222', 3, 1, '-279');
      test_cbrt_001('36', 9, 6, '3.30192725');
      test_cbrt_001('0.898', 7, 0, '0.9647737');
      test_cbrt_001('-94444444444444444.444444444444444444444444444444444444444444414404441444441', 8, 2, '-455399.06');
      test_cbrt_001('-3782929120857330517139808', 5, 2, '-155810000');
      test_cbrt_001('966666666692107298099458326175656566655348300467903965479870253722013788135743211111111111111111111.22222', 1, 5, '1000000000000000000000000000000000');
      test_cbrt_001('16.84', 7, 4, '2.563189');
      test_cbrt_001('-58918', 2, 3, '-39');
      test_cbrt_001('-74535634133038239268820777237286', 2, 4, '-42000000000');
      test_cbrt_001('6888888888.66666666666602248', 3, 5, '1900');
      test_cbrt_001('608785700000000000000000100000000000000000000.000000500020900040006', 1, 5, '800000000000000');
      test_cbrt_001('-3834369', 8, 0, '-156.51813');
      test_cbrt_001('4345752', 8, 0, '163.18804');
      test_cbrt_001('5000300.5', 5, 5, '171');
      test_cbrt_001('0.73', 7, 3, '0.9004113');
      test_cbrt_001('0.612', 20, 3, '0.84901847487755466985');
      test_cbrt_001('-26403122.886392512193592', 9, 3, '-297.772851');
      test_cbrt_001('-15047905.6442424463707664865226022703526330746497470178339129', 10, 2, '-246.8834739');
      test_cbrt_001('-0.57216409476227961', 122, 4, '-0.83018242216788557900092187018458431268949382089457981268783675303907114542359515145805957769873268594828033331460924645988');
      test_cbrt_001('-58892300900.0000037', 72, 3, '-3890.62620353612987584901759020572729952315745798457018660549639374283766');
      test_cbrt_001('4312692950776.434730495181946194732352621783', 134, 0, '16277.3179326290103123151730291347428666068760542903239801418389563715424057253795836596796134792716104557634024961949417454938847683');
      test_cbrt_001('0.772144893677647945980591', 32, 4, '0.91741591091195652167447475342283');
      test_cbrt_001('-6404156859301838811126951723297929248851328010128081790499875', 82, 4, '-185703741377679767357.3800976029196648819860800202650959861930855922060702625367479');
      test_cbrt_001('82632936267840682945343488907.06731470799523118845064687431515', 138, 6, '4355630815.60590669653353707630763857376582544155292301618426362137145407016564135319408858966461324112682532653188194626242452174990441469');
      test_cbrt_001('-61298.9118623440767849615617799359637', 197, 2, '-39.429165763027824633368109569426988335873352574747430934500984379971077138739905025020214349026555314495729845811145173351353942674905845843718751365519784088965133478757694847415073443325596801746');
      test_cbrt_001('-2667296564625933848.771563268738963983215162122262769664228', 16, 0, '-1386831.726818274');
      test_cbrt_001('-0.334827956215', 18, 4, '-0.694396042925351186');
      test_cbrt_001('-99720206756351473857877956382713150380254708747259063563139776823977600150709529793618374286723970525922071298906643096473046848495659004519869163757701760515093579766384020476650579781490788310361655846842647878265152413279324940775571807902246099745918912445535151332', 222, 0, '-463725583930338667619983284372725899222416698496535412229926661119869463138884485967116667.268764679696065784024043219821875298578444546083384238930673115329612447425356818168403301703207667321878308803543383110193582598871');
      test_cbrt_001('-7500005000000.0400000000000300010000000000000000000000000000000005000080000000000000000000000000000000000000000000000000000000000002', 148, 3, '-19574.34255569632077437589146736430354513462358173952556661853843109637110903043841920141950812963359142265525718451865996670282229623898813004424264');
      test_cbrt_001('-0.448468', 65, 3, '-0.76543882436933301547484358146042454236821782800684597996385314496');
      test_cbrt_001('4456480839.850118829380687717773702938945780108504222', 186, 0, '1645.62426023819366824168925970611179098042486858393864888187997539499903266584393283173483354076296462532577165369465744086271078047145002431391610101290550337528381582739390745330190718');
      test_cbrt_001('-96609.9150016783612444151212219171469160528', 240, 2, '-45.8853342870476892493411403085005845531506513402973065908688567063670288324040964632169186092910604211131726914840870130664139857417136966852726525679016120128473243314724524836298854193278510304781073613018919609658048462067078117541267917');
      test_cbrt_001('4685555525555555055595555555555555555555545555555555557555555.5555555555555555155555555555555', 248, 1, '167335093070845212053.23568655992334896377737501807442809961373434087576897330216500135950283334739701735651884253417447515894217902592534791090429673074268316351070024795424585615393609483094797289624124159380909320002173012536209191509994668942513');
      test_cbrt_001('-166.616666666', 209, 4, '-5.5026617052342616148242191958679981633756294691968284245117501906609287423436017722548887408126098326860453334063765780606472030703630175042357147586923686464448738079927220693696480524411130124852775767369759');
      test_cbrt_001('90000000000000990188336751810563895553131772327584661674356934574327131997430235171176535358829942834766892027903586810380716666666666.13894530889067032955500919787773607496418660983547640753478416765344978700918917680179444881557185725915289743352494311111111111', 154, 6, '448140474655718114369086092178601538485288241.3695491088028300586188927081853222791393481056106217377422579723430885965770967892400223712781827123169146742');
      test_cbrt_001('-85690377176662769530000000', 172, 6, '-440870139.6162986343668488373525420672013683234193107109561329235272890252923129958712015571449424496445764927227011775235765025343956947502249567673085220140428475752341634');
      test_cbrt_001('-770000', 315, 4, '-91.6565645433022286626092137070830558694163526764780961804072197329043071216124465836059153674866409019818795567376022473570999553232243320951491034642924310116859135403989828713296248110330728429307978818049273063638547762257276709121136983687240301319624468569985024000817994013321153096111049926913537599622929478');
      test_cbrt_001('-751306536843521448000318938740388', 22, 5, '-90908757590.86052782049');
    });

    /**
     * @tc.number    : SUB_COMMONLIBRARY_DECIMAL_CBRT_0200
     * @tc.name      : testCbrt0002
     * @tc.desc      : Test cbrt
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 1
     */
    it("testCbrt0002", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      Decimal.set ({
        precision: 40,
        rounding: 4,
        toExpNeg: -9e15,
        toExpPos: 9e15,
        minE: -9e15,
        maxE: 9e15
      });
      try {
        test_cbrt_001('e', 40, 4, 'NaN');
        expect(true).assertEqual(false);
      } catch (err) {
        expect(err.name).assertEqual(`BusinessError`);
        expect(err.code).assertEqual(401);
        expect(err.message).assertEqual(`The type of "test(str)" must be Hex/Binary/Octal. Received value is: e`);
      }
    });
  });
}
