/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { webview } from '@kit.ArkWeb';
import { Router } from '@ohos.arkui.UIContext';

@Entry
@Component
struct WebComponent {
  controller: webview.WebviewController = new webview.WebviewController();
  responseWeb: WebResourceResponse = new WebResourceResponse();
  router: Router = this.getUIContext().getRouter();
  heads: Header[] = new Array();
  @State private responselogs: string = '>>> response日志 <<<\n';

  bufferPng = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x6a, 0x08, 0x02, 0x00, 0x00, 0x00, 0xe8, 0x54, 0x8e, 0x8c, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xae, 0xce, 0x1c, 0xe9, 0x00, 0x00, 0x00, 0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x00, 0xb1, 0x8f, 0x0b, 0xfc, 0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0e, 0xc3, 0x00, 0x00, 0x0e, 0xc3, 0x01, 0xc7, 0x6f, 0xa8, 0x64, 0x00, 0x00, 0x02, 0x17, 0x49, 0x44, 0x41, 0x54, 0x78, 0x5e, 0xed, 0xd1, 0xc1, 0x6d, 0x03, 0x31, 0x0c, 0x44, 0xd1, 0x14, 0x92, 0x63, 0xfa, 0xef, 0xcc, 0x35, 0x38, 0x02, 0x4c, 0x2c, 0x02, 0x26, 0xf0, 0x61, 0x96, 0xe3, 0x8c, 0x57, 0xff, 0x81, 0x27, 0x6b, 0x0d, 0x48, 0xfc, 0x1f, 0x77, 0x44, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0xc2, 0x84, 0x22, 0x4c, 0x28, 0x57, 0x98, 0xdb, 0xe7, 0xd7, 0x65, 0xa6, 0x9e, 0xf4, 0x5a, 0x93, 0x61, 0xda, 0x7b, 0x2e, 0x39, 0xf5, 0x54, 0xbf, 0x81, 0x30, 0xed, 0xea, 0x9b, 0x4c, 0x3d, 0xde, 0xe6, 0x6c, 0x98, 0x76, 0xdd, 0xad, 0xa6, 0x56, 0xe0, 0x71, 0x2a, 0x4c, 0xbb, 0xe8, 0x86, 0x53, 0x8b, 0x30, 0xd0, 0xc3, 0xb4, 0x2b, 0xb6, 0xa9, 0x8f, 0x2e, 0xa1, 0x3d, 0xed, 0xf7, 0xd4, 0x77, 0xa3, 0xc4, 0x30, 0xed, 0x66, 0xc7, 0xd4, 0xf1, 0x45, 0xb5, 0xc7, 0x1e, 0x53, 0xc7, 0xa3, 0xc6, 0xc2, 0xd4, 0xc1, 0x06, 0xda, 0xc3, 0x1f, 0x53, 0x67, 0x73, 0x94, 0x30, 0xed, 0x4e, 0x6b, 0xea, 0x60, 0x27, 0xee, 0x0d, 0x0c, 0x84, 0xa9, 0x5f, 0x37, 0xe3, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x10, 0x46, 0xe4, 0x5e, 0x02, 0x61, 0x44, 0xee, 0x25, 0x0c, 0x84, 0x59, 0x53, 0x07, 0xdb, 0x68, 0xcf, 0x5f, 0x53, 0x07, 0x73, 0x94, 0x30, 0x4b, 0xbb, 0xd6, 0x9a, 0x3a, 0xd8, 0x40, 0x7b, 0xf8, 0x63, 0xea, 0x6c, 0xce, 0x58, 0x98, 0x63, 0xea, 0x8b, 0xcb, 0x69, 0xcf, 0xfc, 0x39, 0xf5, 0xc5, 0x28, 0x31, 0xcc, 0xd2, 0x2e, 0xf7, 0x64, 0xea, 0x0f, 0x6f, 0xa5, 0x3d, 0xe1, 0xc9, 0xd4, 0x1f, 0xa6, 0xe9, 0x61, 0x96, 0x76, 0xc5, 0x0d, 0xa7, 0x16, 0x61, 0x70, 0x2a, 0xcc, 0xd2, 0x2e, 0xba, 0xd5, 0xd4, 0x0a, 0x3c, 0xce, 0x86, 0x79, 0x68, 0x37, 0xbe, 0xfc, 0xd4, 0xb3, 0x9d, 0x66, 0xc2, 0x1c, 0xda, 0x03, 0x2e, 0x36, 0xf5, 0xc8, 0x97, 0x18, 0x0e, 0xf3, 0xa7, 0xf6, 0xbc, 0xb7, 0x98, 0xba, 0xfa, 0xff, 0x79, 0x45, 0x18, 0x08, 0x08, 0x13, 0x8a, 0x30, 0xa1, 0x08, 0x13, 0x8a, 0x30, 0xa1, 0x08, 0x13, 0x8a, 0x30, 0xa1, 0x08, 0x13, 0x8a, 0x30, 0xa1, 0x08, 0x13, 0x8a, 0x30, 0xa1, 0x08, 0x13, 0x8a, 0x30, 0xa1, 0x08, 0x13, 0x8a, 0x30, 0xa1, 0x08, 0x13, 0x8a, 0x30, 0xa1, 0x08, 0x13, 0x8a, 0x30, 0xa1, 0x08, 0x13, 0x8a, 0x30, 0xa1, 0x08, 0x13, 0x8a, 0x30, 0xa1, 0x08, 0x13, 0x8a, 0x30, 0xa1, 0x08, 0x13, 0xe9, 0x7e, 0xff, 0x06, 0x91, 0x9a, 0x97, 0x62, 0x2e, 0x42, 0xd5, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82])

  build() {
    Column() {
      Button('返回')
        .onClick(() => {
          this.router.back();
        })

      Web({ src: 'https://www.baidu.com/', controller: this.controller })
        .onInterceptRequest((event) => {
          if (event) {
            console.log('[InterceptTest] getRequestHeader:' + JSON.stringify(event.request.getRequestHeader()));
            console.log('[InterceptTest] url:' + event.request.getRequestUrl());
            console.log('[InterceptTest] isMainFrame:' + event.request.isMainFrame());
            console.log('[InterceptTest] isRedirect:' + event.request.isRedirect());
            console.log('[InterceptTest] isRequestGesture:' + event.request.isRequestGesture());
            console.log('[InterceptTest] getRequestMethod:' + event.request.getRequestMethod());
          }
          let head1: Header = {
            headerKey: "Connection",
            headerValue: "keep-alive"
          }
          let head2: Header = {
            headerKey: "Cache-Control",
            headerValue: "no-cache"
          }
          let length = this.heads.push(head1);
          length = this.heads.push(head2);
          console.log('The response header result length is :' + length);

          const promise: Promise<String> = new Promise((resolve: Function, reject: Function) => {
            const headers: Header[] = [
              { headerKey: "Content-Type", headerValue: "image/png" },
              { headerKey: "Content-Length", headerValue: this.bufferPng.length.toString() }
            ];
            this.responseWeb.setResponseHeader(headers)
            this.responseWeb.setResponseData(this.bufferPng.buffer);
            this.responseWeb.setResponseMimeType("image/png");
            this.responseWeb.setResponseEncoding("binary");
            this.responseWeb.setResponseCode(200);
            this.responseWeb.setReasonMessage('OK');
            resolve("success");
          })
          promise.then(() => {
            this.responselogs += `[responseData] ${this.responseWeb.getResponseDataEx()}\n`;
            this.responselogs += `[Encoding] ${this.responseWeb.getResponseEncoding()}\n`;
            this.responselogs += `[MimeType] ${this.responseWeb.getResponseMimeType()}\n`;
            this.responselogs += `[Code] ${this.responseWeb.getResponseCode()}\n`;
            this.responselogs += `[ReasonMessage] ${this.responseWeb.getReasonMessage()}\n`;
            this.responselogs += `[Headers] ${JSON.stringify(this.responseWeb.getResponseHeader())}\n\n`;

            this.responseWeb.setResponseIsReady(true);
          })
          this.responseWeb.setResponseIsReady(false);
          return this.responseWeb;
        })
          .width('100%')
          .height('80%')

      TextArea({
        text: this.responselogs,
        placeholder: 'response日志将显示在这里...'
      })
        .id("callbackLogs")
        .width('100%')
        .height('20%')
        .margin(10)
        .fontColor('#333')
        .backgroundColor('#f5f5f5')
        .borderRadius(8)
    }
  }
}
