/*
 * Copyright (c) 2025 Shenzhen Kaihong Digital Industry Development Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { afterAll, afterEach, beforeAll, beforeEach, describe, expect, it, TestType, Size, Level } from '@ohos/hypium';
import image from '@ohos.multimedia.image';
import drawing from '@ohos.graphics.drawing';
import common2D from '@ohos.graphics.common2D';
import { getEnumCount } from './utils';

export default function colorFilterTest() {
  describe('DrawingTsColorFilterTest', () => {
    let pixel: image.PixelMap;
    const DEFAULT = 0;
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(async () => {
      const color: ArrayBuffer = new ArrayBuffer(40000); // 96为需要创建的像素buffer大小，取值为：height * width *4
      let opts: image.InitializationOptions = {
        editable: true, pixelFormat: 3, size: {
          height: 100, width: 100
        }
      }
      pixel = await image.createPixelMap(color, opts);
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_0100
     * @tc.name      : testColorFilterCreateBlendModeColorFilterNormal0001
     * @tc.desc      : Test for testColorFilterCreateBlendModeColorFilterNormal.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    it('testColorFilterCreateBlendModeColorFilterNormal0001', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL0, () => {
      let msg = 'testColorFilterCreateBlendModeColorFilterNormal0001';

      try {
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.CLEAR);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.SRC);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.DST);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.SRC_OVER);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.DST_OVER);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.SRC_IN);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.DST_IN);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.SRC_OUT);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.DST_OUT);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.SRC_ATOP);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.DST_ATOP);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.XOR);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.PLUS);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.MODULATE);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.SCREEN);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.OVERLAY);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.DARKEN);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.LIGHTEN);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.COLOR_DODGE);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.COLOR_BURN);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.HARD_LIGHT);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.SOFT_LIGHT);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.DIFFERENCE);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.EXCLUSION);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.MULTIPLY);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.HUE);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.SATURATION);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.COLOR);
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.LUMINOSITY);
        console.info(msg + ' createBlendModeColorFilter successed');
      } catch (e) {
        console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }

      try {
        drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 254.66,
          red: 254.555,
          green: 125.3,
          blue: 10.222
        }, drawing.BlendMode.SRC);
        console.info(msg + ' createBlendModeColorFilter successed');
      } catch (e) {
        console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_0200
     * @tc.name      : testColorFilterCreateBlendModeColorFilterNull0002
     * @tc.desc      : Test for testColorFilterCreateBlendModeColorFilterNull.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 3
     */
    it('testColorFilterCreateBlendModeColorFilterNull0002', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, () => {
      let msg = 'testColorFilterCreateBlendModeColorFilterNull0002';

      try {
        drawing.ColorFilter.createBlendModeColorFilter(undefined, drawing.BlendMode.SRC);
        console.info(msg + ' createBlendModeColorFilter successed');
      } catch (e) {
        console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }

      try {
        drawing.ColorFilter.createBlendModeColorFilter(undefined, drawing.BlendMode.SRC);
        console.info(msg + ' createBlendModeColorFilter successed');
      } catch (e) {
        console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_0300
     * @tc.name      : testColorFilterCreateBlendModeColorFilterMultipleCalls0003
     * @tc.desc      : Test for testColorFilterCreateBlendModeColorFilterMultipleCalls.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 3
     */
    it('testColorFilterCreateBlendModeColorFilterMultipleCalls0003', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      () => {
        let msg = 'testColorFilterCreateBlendModeColorFilterMultipleCalls0003';

        for (let i = 0; i < 20; i++) {
          const randomColor: common2D.Color = {
            alpha: Math.floor(Math.random() * 256),
            red: Math.floor(Math.random() * 256),
            green: Math.floor(Math.random() * 256),
            blue: Math.floor(Math.random() * 256)
          };
          const randomEnum = Math.floor(Math.random() * getEnumCount(drawing.BlendMode));

          try {
            drawing.ColorFilter.createBlendModeColorFilter(randomColor, randomEnum);
            console.info(msg + ' createBlendModeColorFilter succeeded');
          } catch (e) {
            console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
            expect().assertFail();
          }
        }
      })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_0400
     * @tc.name      : testColorFilterCreateBlendModeColorFilterBoundaryValue0004
     * @tc.desc      : Test for testColorFilterCreateBlendModeColorFilterBoundaryValue.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 3
     */
    it('testColorFilterCreateBlendModeColorFilterBoundaryValue0004', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      () => {
        let msg = 'testColorFilterCreateBlendModeColorFilterBoundaryValue0004';

        const randomColor: common2D.Color = {
          alpha: Math.floor(Math.random() * 256),
          red: Math.floor(Math.random() * 256),
          green: Math.floor(Math.random() * 256),
          blue: Math.floor(Math.random() * 256)
        };
        const enumCount = getEnumCount(drawing.BlendMode);
        for (let i = 0; i < enumCount; i++) {
          try {
            drawing.ColorFilter.createBlendModeColorFilter(randomColor, i);
            console.info(msg + ' createBlendModeColorFilter succeeded');
          } catch (e) {
            console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
            expect().assertFail();
          }
        }

        try {
          drawing.ColorFilter.createBlendModeColorFilter({
            alpha: -1,
            red: 255,
            green: 0,
            blue: 255
          }, drawing.BlendMode.SRC);
          console.info(msg + ' createBlendModeColorFilter succeeded');
        } catch (e) {
          console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
          expect(e.code).assertEqual(401);
        }

        try {
          drawing.ColorFilter.createBlendModeColorFilter({
            alpha: 255,
            red: 256,
            green: 0,
            blue: 255
          }, drawing.BlendMode.SRC);
          console.info(msg + ' createBlendModeColorFilter succeeded');
        } catch (e) {
          console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
          expect(e.code).assertEqual(401);
        }

        try {
          drawing.ColorFilter.createBlendModeColorFilter({
            alpha: 255,
            red: -1,
            green: 0,
            blue: 255
          }, drawing.BlendMode.SRC);
          console.info(msg + ' createBlendModeColorFilter succeeded');
        } catch (e) {
          console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
          expect(e.code).assertEqual(401);
        }

        try {
          drawing.ColorFilter.createBlendModeColorFilter({
            alpha: 255,
            red: 255,
            green: 256,
            blue: 255
          }, drawing.BlendMode.SRC);
          console.info(msg + ' createBlendModeColorFilter succeeded');
        } catch (e) {
          console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
          expect(e.code).assertEqual(401);
        }

        try {
          drawing.ColorFilter.createBlendModeColorFilter({
            alpha: 255,
            red: 255,
            green: -1,
            blue: 255
          }, drawing.BlendMode.SRC);
          console.info(msg + ' createBlendModeColorFilter succeeded');
        } catch (e) {
          console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
          expect(e.code).assertEqual(401);
        }

        try {
          drawing.ColorFilter.createBlendModeColorFilter({
            alpha: 255,
            red: 255,
            green: 0,
            blue: 256
          }, drawing.BlendMode.SRC);
          console.info(msg + ' createBlendModeColorFilter succeeded');
        } catch (e) {
          console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
          expect(e.code).assertEqual(401);
        }

        try {
          drawing.ColorFilter.createBlendModeColorFilter({
            alpha: 255,
            red: 255,
            green: 0,
            blue: -1
          }, drawing.BlendMode.SRC);
          console.info(msg + ' createBlendModeColorFilter succeeded');
        } catch (e) {
          console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
          expect(e.code).assertEqual(401);
        }
      })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_0500
     * @tc.name      : testColorFilterCreateComposeColorFilterNormal0005
     * @tc.desc      : Test for testColorFilterCreateComposeColorFilterNormal.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    it('testColorFilterCreateComposeColorFilterNormal0005', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL0, () => {
      let msg = 'testColorFilterCreateComposeColorFilterNormal0005';

      let colorFilter1: drawing.ColorFilter | null = null;
      try {
        colorFilter1 = drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.SRC);
        console.info(msg + ' createBlendModeColorFilter successed');
      } catch (e) {
        console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }

      let colorFilter2: drawing.ColorFilter | null = null;
      try {
        colorFilter2 = drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.DST);
        console.info(msg + ' createBlendModeColorFilter successed');
      } catch (e) {
        console.info(msg + ` createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }

      try {
        drawing.ColorFilter.createComposeColorFilter(colorFilter1, colorFilter2);
        console.info(msg + ' createComposeColorFilter successed');
      } catch (e) {
        console.info(msg + ` createComposeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }

      try {
        drawing.ColorFilter.createComposeColorFilter(colorFilter1, drawing.ColorFilter.createSRGBGammaToLinear());
        console.info(msg + ' createComposeColorFilter successed');
      } catch (e) {
        console.info(msg + ` createComposeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }

      try {
        drawing.ColorFilter.createComposeColorFilter(drawing.ColorFilter.createSRGBGammaToLinear(), colorFilter2);
        console.info(msg + ' createComposeColorFilter successed');
      } catch (e) {
        console.info(msg + ` createComposeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }

      try {
        drawing.ColorFilter.createComposeColorFilter(drawing.ColorFilter.createSRGBGammaToLinear(),
          drawing.ColorFilter.createLumaColorFilter());
        console.info(msg + ' createComposeColorFilter successed');
      } catch (e) {
        console.info(msg + ` createComposeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_0600
     * @tc.name      : testColorFilterCreateComposeColorFilterNull0006
     * @tc.desc      : Test for testColorFilterCreateComposeColorFilterNull.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 3
     */
    it('testColorFilterCreateComposeColorFilterNull0006', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, () => {
      let msg = 'testColorFilterCreateComposeColorFilterNull0006';

      let colorFilter1: drawing.ColorFilter | null = null;
      let colorFilter2: drawing.ColorFilter | null = null;
      try {
        colorFilter1 = drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.SRC);
        colorFilter2 = drawing.ColorFilter.createBlendModeColorFilter({
          alpha: 255,
          red: 255,
          green: 0,
          blue: 0
        }, drawing.BlendMode.DST);
      } catch (e) {
        console.info(`createBlendModeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }

      try {
        drawing.ColorFilter.createComposeColorFilter(undefined, colorFilter2);
        console.info(msg + ' createComposeColorFilter succeeded');
      } catch (e) {
        console.info(msg + ` createComposeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }

      try {
        drawing.ColorFilter.createComposeColorFilter(colorFilter1, undefined);
        console.info(msg + ' createComposeColorFilter succeeded');
      } catch (e) {
        console.info(msg + ` createComposeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }

      try {
        drawing.ColorFilter.createComposeColorFilter(null, colorFilter2);
        console.info(msg + ' createComposeColorFilter succeeded');
      } catch (e) {
        console.info(msg + ` createComposeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }

      try {
        drawing.ColorFilter.createComposeColorFilter(colorFilter1, null);
        console.info(msg + ' createComposeColorFilter succeeded');
      } catch (e) {
        console.info(msg + ` createComposeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_0700
     * @tc.name      : testColorFilterCreateComposeColorFilterMultipleCalls0007
     * @tc.desc      : Test for testColorFilterCreateComposeColorFilterMultipleCalls.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 3
     */
    it('testColorFilterCreateComposeColorFilterMultipleCalls0007', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      () => {
        let msg = 'testColorFilterCreateComposeColorFilterMultipleCalls0007';
        const filters = [
          drawing.ColorFilter.createSRGBGammaToLinear(),
          drawing.ColorFilter.createLumaColorFilter(),
          drawing.ColorFilter.createLinearToSRGBGamma(),
        ];
        for (let i = 0; i < 20; i++) {
          const randomFilter1 = filters[Math.floor(Math.random() * 3)];
          const randomFilter2 = filters[Math.floor(Math.random() * 3)];
          try {
            drawing.ColorFilter.createComposeColorFilter(randomFilter1, randomFilter2);
            console.info(msg + ' createComposeColorFilter succeeded');
          } catch (e) {
            console.info(msg + ` createComposeColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
            expect().assertFail();
          }
        }
      })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_0800
     * @tc.name      : testColorFilterCreateLinearToSRGBGammaNormal0008
     * @tc.desc      : Test for testColorFilterCreateLinearToSRGBGammaNormal.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    it('testColorFilterCreateLinearToSRGBGammaNormal0008', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL0, () => {
      let msg = 'testColorFilterCreateLinearToSRGBGammaNormal0008';
      try {
        drawing.ColorFilter.createLinearToSRGBGamma();
        console.info(msg + ' createLinearToSRGBGamma successed');
      } catch (e) {
        console.info(msg + ` createLinearToSRGBGamma errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_0900
     * @tc.name      : testColorFilterCreateLinearToSRGBGammaMultipleCalls0009
     * @tc.desc      : Test for testColorFilterCreateLinearToSRGBGammaMultipleCalls.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 3
     */
    it('testColorFilterCreateLinearToSRGBGammaMultipleCalls0009', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      () => {
        let msg = 'testColorFilterCreateLinearToSRGBGammaMultipleCalls0009';
        try {
          for (let i = 0; i < 20; i++) {
            drawing.ColorFilter.createLinearToSRGBGamma();
            console.info(msg + ' createLinearToSRGBGamma successed');
          }
        } catch (e) {
          console.info(msg + ` createLinearToSRGBGamma errorCode is:  ${e.code} + errormsg is: ${e.message}`);
          expect().assertFail();
        }
      })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_1000
     * @tc.name      : testColorFilterCreateSRGBGammaToLinearNormal0010
     * @tc.desc      : Test for testColorFilterCreateSRGBGammaToLinearNormal.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    it('testColorFilterCreateSRGBGammaToLinearNormal0010', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL0, () => {
      let msg = 'testColorFilterCreateSRGBGammaToLinearNormal0010';
      try {
        drawing.ColorFilter.createSRGBGammaToLinear();
        console.info(msg + ' createSRGBGammaToLinear successed');
      } catch (e) {
        console.info(msg + ` createSRGBGammaToLinear errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_1100
     * @tc.name      : testColorFilterCreateSRGBGammaToLinearMultipleCalls0011
     * @tc.desc      : Test for testColorFilterCreateSRGBGammaToLinearMultipleCalls.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 3
     */
    it('testColorFilterCreateSRGBGammaToLinearMultipleCalls0011', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      () => {
        let msg = 'testColorFilterCreateSRGBGammaToLinearMultipleCalls0011';
        try {
          for (let i = 0; i < 20; i++) {
            drawing.ColorFilter.createSRGBGammaToLinear();
            console.info(msg + ' createSRGBGammaToLinear successed');
          }
        } catch (e) {
          console.info(msg + ` createSRGBGammaToLinear errorCode is:  ${e.code} + errormsg is: ${e.message}`);
          expect().assertFail();
        }
      })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_1200
     * @tc.name      : testColorFilterCreateLumaColorFilterNormal0012
     * @tc.desc      : Test for testColorFilterCreateLumaColorFilterNormal.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    it('testColorFilterCreateLumaColorFilterNormal0012', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL0, () => {
      let msg = 'testColorFilterCreateLumaColorFilterNormal0012';
      try {
        drawing.ColorFilter.createLumaColorFilter();
        console.info(msg + ' createLumaColorFilter successed');
      } catch (e) {
        console.info(msg + ` createLumaColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_1300
     * @tc.name      : testColorFilterCreateLumaColorFilterMultipleCalls0013
     * @tc.desc      : Test for testColorFilterCreateLumaColorFilterMultipleCalls.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 3
     */
    it('testColorFilterCreateLumaColorFilterMultipleCalls0013', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, () => {
      let msg = 'testColorFilterCreateLumaColorFilterMultipleCalls0013';
      try {
        for (let i = 0; i < 20; i++) {
          drawing.ColorFilter.createLumaColorFilter();
          console.info(msg + ' createLumaColorFilter successed');
        }
      } catch (e) {
        console.info(msg + ` createLumaColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_1400
     * @tc.name      : testColorFilterCreateMatrixColorFilterNormal0014
     * @tc.desc      : Test for testColorFilterCreateMatrixColorFilterNormal.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    it('testColorFilterCreateMatrixColorFilterNormal0014', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL0, () => {
      let msg = 'testColorFilterCreateMatrixColorFilterNormal0014';
      const matrix_ = [
        1, 0, 0, 0, 0, // 红色通道
        0, 1, 0, 0, 0, // 绿色通道
        0, 0, 1, 0, 0, // 蓝色通道
        0, 0, 0, 1, 0// 透明度通道
      ];
      try {
        let colorFilter = drawing.ColorFilter.createMatrixColorFilter(matrix_);
        expect(colorFilter != null || colorFilter != undefined).assertTrue()
        console.info(msg + ' createMatrixColorFilter successed,colorFilter:' + colorFilter);
      } catch (e) {
        console.info(msg + ` createMatrixColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_1500
     * @tc.name      : testColorFilterCreateMatrixColorFilterNull0015
     * @tc.desc      : Test for testColorFilterCreateMatrixColorFilterNull.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 3
     */
    it('testColorFilterCreateMatrixColorFilterNull0015', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, () => {
      let msg = 'testColorFilterCreateMatrixColorFilterNull0015';
      try {
        drawing.ColorFilter.createMatrixColorFilter(null);
        console.info(msg + ' createMatrixColorFilter successed');
      } catch (e) {
        console.info(msg + ` createMatrixColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }

      try {
        drawing.ColorFilter.createMatrixColorFilter(undefined);
        console.info(msg + ' createMatrixColorFilter successed');
      } catch (e) {
        console.info(msg + ` createMatrixColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_1600
     * @tc.name      : testColorFilterCreateMatrixColorFilterMultipleCalls0016
     * @tc.desc      : Test for testColorFilterCreateMatrixColorFilterMultipleCalls.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 3
     */
    it('testColorFilterCreateMatrixColorFilterMultipleCalls0016', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      () => {
        let msg = 'testColorFilterCreateMatrixColorFilterMultipleCalls0016';
        for (let i = 0; i < 20; i++) {
          const matrix: number[] = Array(20).fill(0).map(() => Math.random() * 10 - 5);
          try {
            let colorFilter = drawing.ColorFilter.createMatrixColorFilter(matrix);
            expect(colorFilter != null || colorFilter != undefined).assertTrue()
            console.info(msg + ' createMatrixColorFilter successed,colorFilter:' + colorFilter);
          } catch (e) {
            console.info(msg + ` createMatrixColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
            expect().assertFail();
          }
        }

      })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_1700
     * @tc.name      : testColorFilterCreateMatrixColorFilterAbnormal0017
     * @tc.desc      : Test for testColorFilterCreateMatrixColorFilterAbnormal.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 3
     */
    it('testColorFilterCreateMatrixColorFilterAbnormal0017', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, () => {
      let msg = 'testColorFilterCreateMatrixColorFilterAbnormal0017';
      try {
        drawing.ColorFilter.createMatrixColorFilter([]);
        console.info(msg + ' createMatrixColorFilter successed');
      } catch (e) {
        console.info(msg + ` createMatrixColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }

      try {
        const matrix: number[] = Array(19).fill(0).map(() => Math.random() * 10 - 5);
        drawing.ColorFilter.createMatrixColorFilter(matrix);
        console.info(msg + ' createMatrixColorFilter successed');
      } catch (e) {
        console.info(msg + ` createMatrixColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }

      try {
        const matrix: number[] = Array(21).fill(0).map(() => Math.random() * 10 - 5);
        drawing.ColorFilter.createMatrixColorFilter(matrix);
        console.info(msg + ' createMatrixColorFilter successed');
      } catch (e) {
        console.info(msg + ` createMatrixColorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_1800
     * @tc.name      : testColorFilterCreateLightingColorFilterNormal0018
     * @tc.desc      : Test for testColorFilterCreateLightingColorFilterNormal.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    it('testColorFilterCreateLightingColorFilterNormal0018', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL0, () => {
      let msg = 'testColorFilterCreateLightingColorFilterNormal0018';
      let mulColor: common2D.Color = {
        alpha: 0,
        red: 0,
        green: 0,
        blue: 0
      };
      let addColor: common2D.Color = {
        alpha: 255,
        red: 255,
        green: 255,
        blue: 255
      };
      try {
        let colorFilter = drawing.ColorFilter.createLightingColorFilter(mulColor, addColor);
        console.info(msg + ' createLightingColorFilter colorFilter successed');
        expect(colorFilter != null || colorFilter != undefined).assertTrue()
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
      try {
        let colorFilter2 = drawing.ColorFilter.createLightingColorFilter(addColor, mulColor);
        console.info(msg + ' createLightingColorFilter colorFilter2 successed');
        expect(colorFilter2 != null || colorFilter2 != undefined).assertTrue()
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter2 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
      try {
        let colorFilter3 = drawing.ColorFilter.createLightingColorFilter(0xFFFFFFFF, 0x00000000);
        console.info(msg + ' createLightingColorFilter colorFilter3 successed');
        expect(colorFilter3 != null || colorFilter3 != undefined).assertTrue()
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter3 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
      try {
        let colorFilter4 = drawing.ColorFilter.createLightingColorFilter(300, 100.2);
        console.info(msg + ' createLightingColorFilter colorFilter4 successed');
        expect(colorFilter4 != null || colorFilter4 != undefined).assertTrue()
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter4 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_1900
     * @tc.name      : testColorFilterCreateLightingColorFilterNull0019
     * @tc.desc      : Test for testColorFilterCreateLightingColorFilterNull.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 4
     */
    it('testColorFilterCreateLightingColorFilterNull0019', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL4, () => {
      let msg = 'testColorFilterCreateLightingColorFilterNull0019';
      let mulColor: common2D.Color = {
        alpha: 0,
        red: 0,
        green: 0,
        blue: 20
      };
      let addColor: common2D.Color = {
        alpha: 0,
        red: 0,
        green: 0,
        blue: 125
      };
      try {
        let colorFilter = drawing.ColorFilter.createLightingColorFilter(null, addColor);
        console.info(msg + ' createLightingColorFilter colorFilter successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      try {
        let colorFilter2 = drawing.ColorFilter.createLightingColorFilter(undefined, addColor);
        console.info(msg + ' createLightingColorFilter colorFilter2 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter2 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      try {
        let colorFilter3 = drawing.ColorFilter.createLightingColorFilter(mulColor, null);
        console.info(msg + ' createLightingColorFilter colorFilter3 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter3 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      try {
        let colorFilter4 = drawing.ColorFilter.createLightingColorFilter(mulColor, undefined);
        console.info(msg + ' createLightingColorFilter colorFilter4 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter4 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
    })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_2000
     * @tc.name      : testColorFilterCreateLightingColorFilterMultipleCalls0020
     * @tc.desc      : Test for testColorFilterCreateLightingColorFilterMultipleCalls.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('testColorFilterCreateLightingColorFilterMultipleCalls0020', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2,
      () => {
        let msg = 'testColorFilterCreateLightingColorFilterMultipleCalls0020';
        for (let i = 0; i < 20; i++) {
          let randomNumber1 = Math.floor(Math.random() * 100);
          let randomNumber2 = Math.floor(Math.random() * 200);
          console.info(msg +
            ` randomNumber1 is: ${randomNumber1}, randomNumber2 is: ${randomNumber2}, step i is: ${i}}`);
          try {
            let colorFilter = drawing.ColorFilter.createLightingColorFilter(randomNumber1, randomNumber2);
            console.info(msg + ' createLightingColorFilter colorFilter successed' + i);
            expect(colorFilter != null || colorFilter != undefined).assertTrue()
          } catch (e) {
            console.info(msg +
              ` createLightingColorFilter colorFilter errorCode is:  ${e.code} + errormsg is: ${e.message}`);
            expect().assertFail();
          }
        }
      })

    /**
     * @tc.number    : SUB_BASIC_GRAPHICS_SPECIAL_API_TS_DRAWING_COLORFILTER_2100
     * @tc.name      : testColorFilterCreateLightingColorFilterAbnormal0021
     * @tc.desc      : Test for testColorFilterCreateLightingColorFilterAbnormal.
     * @tc.size      : MediumTest
     * @tc.type      : Function
     * @tc.level     : Level 3
     */
    it('testColorFilterCreateLightingColorFilterAbnormal0021', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, () => {
      let msg = 'testColorFilterCreateLightingColorFilterAbnormal0021';
      let mulColor: common2D.Color = {
        alpha: 0,
        red: 0,
        green: 0,
        blue: 0
      };
      let addColor: common2D.Color = {
        alpha: 255,
        red: 0,
        green: 0,
        blue: 125
      };
      try {
        let colorFilter1 = drawing.ColorFilter.createLightingColorFilter(mulColor, 200);
        expect(colorFilter1 != null || colorFilter1 != undefined).assertTrue();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter1 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
      try {
        let colorFilter2 = drawing.ColorFilter.createLightingColorFilter(0xffff0000, addColor);
        console.info(msg + ' createLightingColorFilter colorFilter2 successed');
        expect(colorFilter2 != null || colorFilter2 != undefined).assertTrue();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter2 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect().assertFail();
      }
      mulColor = {
        alpha: -1,
        red: 0,
        green: 0,
        blue: 0
      };
      try {
        let colorFilter3 = drawing.ColorFilter.createLightingColorFilter(mulColor, addColor);
        console.info(msg + ' createLightingColorFilter colorFilter3 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter3 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      try {
        let colorFilter4 = drawing.ColorFilter.createLightingColorFilter(addColor, mulColor);
        console.info(msg + ' createLightingColorFilter colorFilter4 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter4 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      mulColor = {
        alpha: 256,
        red: 0,
        green: 0,
        blue: 0
      };
      try {
        let colorFilter5 = drawing.ColorFilter.createLightingColorFilter(mulColor, addColor);
        console.info(msg + ' createLightingColorFilter colorFilter5 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter5 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      try {
        let colorFilter6 = drawing.ColorFilter.createLightingColorFilter(addColor, mulColor);
        console.info(msg + ' createLightingColorFilter colorFilter6 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter6 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      mulColor = {
        alpha: 255,
        red: -1,
        green: 0,
        blue: 0
      };
      try {
        let colorFilter7 = drawing.ColorFilter.createLightingColorFilter(mulColor, addColor);
        console.info(msg + ' createLightingColorFilter colorFilter7 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter7 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      try {
        let colorFilter8 = drawing.ColorFilter.createLightingColorFilter(addColor, mulColor);
        console.info(msg + ' createLightingColorFilter colorFilter8 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter8 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      mulColor = {
        alpha: 255,
        red: 256,
        green: 0,
        blue: 0
      };
      try {
        let colorFilter9 = drawing.ColorFilter.createLightingColorFilter(mulColor, addColor);
        console.info(msg + ' createLightingColorFilter colorFilter9 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter9 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      try {
        let colorFilter10 = drawing.ColorFilter.createLightingColorFilter(addColor, mulColor);
        console.info(msg + ' createLightingColorFilter colorFilter10 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter10 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      mulColor = {
        alpha: 255,
        red: 255,
        green: -1,
        blue: 0
      };
      try {
        let colorFilter9 = drawing.ColorFilter.createLightingColorFilter(mulColor, addColor);
        console.info(msg + ' createLightingColorFilter colorFilter9 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter9 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      try {
        let colorFilter10 = drawing.ColorFilter.createLightingColorFilter(addColor, mulColor);
        console.info(msg + ' createLightingColorFilter colorFilter10 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter10 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      mulColor = {
        alpha: 255,
        red: 255,
        green: 256,
        blue: 0
      };
      try {
        let colorFilter11 = drawing.ColorFilter.createLightingColorFilter(mulColor, addColor);
        console.info(msg + ' createLightingColorFilter colorFilter11 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter11 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      try {
        let colorFilter12 = drawing.ColorFilter.createLightingColorFilter(addColor, mulColor);
        console.info(msg + ' createLightingColorFilter colorFilter12 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter12 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      mulColor = {
        alpha: 255,
        red: 255,
        green: 255,
        blue: -1
      };
      try {
        let colorFilter13 = drawing.ColorFilter.createLightingColorFilter(mulColor, addColor);
        console.info(msg + ' createLightingColorFilter colorFilter13 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter13 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      try {
        let colorFilter14 = drawing.ColorFilter.createLightingColorFilter(addColor, mulColor);
        console.info(msg + ' createLightingColorFilter colorFilter14 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter14 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      mulColor = {
        alpha: 255,
        red: 255,
        green: 255,
        blue: 256
      };
      try {
        let colorFilter15 = drawing.ColorFilter.createLightingColorFilter(mulColor, addColor);
        console.info(msg + ' createLightingColorFilter colorFilter15 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter15 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
      try {
        let colorFilter16 = drawing.ColorFilter.createLightingColorFilter(addColor, mulColor);
        console.info(msg + ' createLightingColorFilter colorFilter16 successed');
        expect().assertFail();
      } catch (e) {
        console.info(msg +
          ` createLightingColorFilter colorFilter16 errorCode is:  ${e.code} + errormsg is: ${e.message}`);
        expect(e.code).assertEqual(401);
      }
    })
  })
}